---
title: "LICOR Data Aggregation"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"

execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 5
---
*Always Restart R before running any script!*  
  
# Combine Cleaned Logs in "data_clean"  
  
## NOTE: Run 01_wrangle_LICOR_logs.qmd first!  
  
__Files are encoded using UTF-8__   

Paths used in this script are absolute. They are generated using the function **here()** combined with the code's relative paths defined as constants.  
  
Some variable names are not unique like "time". Therefore, the variable names are a concatenation of the group name, and an underscore separates the variable name. e.g., group "SysObs" and variable "time" are converted into a new name of "SysObs_time". Any spaces in these new variable names are replaced with and underscore.  
```{r setup, include=FALSE}
#| warning: false
#| echo: false
#| error: false

knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(here)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script
here::here()
# https://www.regextester.com/ for regex checking

# constants to data paths
DATARAW <- "data_raw" 
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"


```


```{r load_selected_data}
#| warning: false
#| echo: false
#| error: false

add_selected_file <- function(LogFileName, cleandf) {
  
  SelectedFilename <- here(DATACLEAN, LogFileName)

  SelectedData <- read_csv(SelectedFilename, 
                           col_names = TRUE, 
                           show_col_types = FALSE) 
  cleandf <- rbind(cleandf, SelectedData)
  
  return(cleandf)
  
}
```

# Main Process

## 1) Aggregate all the files that were pre-processed  
  
Files are selected in the folder "data_clean" using a regex of "\^selected\_" and appended to a common data frame.  
  
## 2) Generate an JOINED Leaf Identification File  
   
A file is create in the "data_user" folder name "JOINED_leaf_identification.csv" These are the joined values from the new combined data set and the previous "leaf_identification.csv" file. This allows previous edits to remain. Any NA values need reviesed to have their "Data_plant_id", and "Data_leaftype" assigned. Once this file is cleaned up it should be renamed by removing the prefix "JOINED_" to replace the file "leaf_identification.csv" for future processing with the latest data.  
  
**NOTE:** It is recommended that the previous "leaf_identification.csv" file be backed up before replacing it with this new version.  
**This process needs to be performed every time new LI-COR log files are added to "data_raw".**  

The following columns are provided for the identification of leaf information and to create a unique key to any group of data.  
  
The following information will help identify the type of leaf that was measured and on which plant.  
"Filenames_filename, Data_group, Data_remarks, Data_plant_id, Data_leaftype"  
  
**The only values that can change are Data_plant_id and Data_leaftype.**  
  
"Filenames_filename" - provided: the original LI-COR text log file name.  

`Data_group" - provided: the group number that corresponds to the *\[Data\]* block within each LI-COR text log file.  
  
"Data_remarks" - provided: the remarks found in the "Data_group" within the "Filenames_filename"  
  
"Data_plant_id" REQUIRED - user-defined value to identify a unique plant in the experiment, current values are numbers 2 or 3 which correspond to the plant elevation of 2 or 3 (mountain top).  

"Data_leaftype" REQUIRED - user-defined value to identify the leaf on the plant used for LI-COR readings. "Treatment", "Control", and "Reference" values should exist for each group of readings for each leaf on each plant in the experiment. Other values are ignored. Six readings for each of them need to be identified. Any additional readings receive a value such as "Extra Reading". Additional values can be assigned for leaves that are not explicitly part of the experiment such as a bad reading. These need not be unique, but should be descriptive enough to understand why this is not being inclueded in the experiment. "BAD reading" for readings in a group that were taken by mistake and known to be invalid for analysis.  

```{r main}
#| warning: false
#| echo: false
#| error: false

# Aggregate all the files that were pre-processed and have a prefix of "selected_"
# these are the files that only contain values of interest from the selected fields
FileList <- list.files(DATACLEAN, pattern = "^selected_")
cleandf <- data.frame()

# build a df that contains all of the selected_ files clean data
for (FileName in FileList) {
  # print(FileName)
  cleandf <- add_selected_file(FileName, cleandf)
}

# store off all of the combined data
write_csv(cleandf, here(DATAUSER,"selected_log_data.csv"), 
          append = FALSE, 
          col_names = TRUE)

```


```{r empty_joined_data}
#| warning: false
#| echo: false
#| error: false

# DEFUNCT CODE __Generate an Empty Leaf Identification File__
# store off the first columns of the combined data to generate a file
# used for manual identification of information that is not contained
# within the LICOR data
# NOTE: this file is generated every time, any edits will be lost
# write_csv(cleandf[,1:6],
#           here(DATAUSER, "input", "EMPTY_leaf_identification.csv"),
#           append = FALSE,
#           col_names = TRUE)
# 
# __Generate the JOINED Leaf Identification File__
# join all lines in the current leaf_identification.csv file with cleandf
# previously identified rows will remain and unknown rows will be added
# JOINED_final_raw_data.csv can be continued to be edited once done,
# it should replace the leaf_identification.csv file for future processing
leafdf <- read_csv(here(DATAUSER, "input", "leaf_identification.csv"),
                   col_names = TRUE,
                   show_col_types = FALSE)
leafjoindf <-left_join(cleandf, leafdf, by = c('Filenames_filename', 'Data_group', 'SysObs_obs'))
# join causes duplication of column names
# rename the required columns and remove the ones that are duplicats
leafjoindf <- rename(leafjoindf, c("Data_remarks" = "Data_remarks.x",
                                  "Data_plant_id" = "Data_plant_id.y",
                                  "Data_leaftype" = "Data_leaftype.y",
                                  "SysObs_date" = "SysObs_date.x"))
leafjoindf[,"Data_remarks.y"] <- NULL
leafjoindf[,"Data_plant_id.x"] <- NULL
leafjoindf[,"Data_leaftype.x"] <- NULL
leafjoindf[,"SysObs_date.y"] <- NULL

# general column name cleanup to get rid of remaining .x and .y columns
colnames(leafjoindf)<-gsub("\\.x","",colnames(leafjoindf))
leafjoindf <- leafjoindf %>% select(-contains(".y"))

# the fields are in the wrong order from the joine and cleanup, put them back
leafjoindf <- leafjoindf %>% relocate(c(Data_remarks, Data_plant_id, Data_leaftype), .after = Data_group)

# final file that the user should continue to edit
write_csv(leafjoindf, here(DATAUSER, "input", "JOINED_leaf_identification.csv"),
          append = FALSE,
          col_names = TRUE)
```

```{r leaf_identification}
#| warning: false
#| echo: false
#| error: false

#__Combine leaf_identification.csv wit the cleandf__
# add in the leaf identification information that the user has entered
# this newdf contains only identified leaf rows
newdf <-inner_join(leafdf, cleandf, by = c('Filenames_filename', 'Data_group', 'SysObs_obs'))
# join causes duplication of column names
newdf <- rename(newdf,c("Data_remarks" = "Data_remarks.x", 
                        "Data_plant_id" = "Data_plant_id.x", 
                        "Data_leaftype" = "Data_leaftype.x"))
# colmun names with ".x" are kept
# column names with ".y" are removed as they do not contain data
newdf[,"Data_remarks.y"] <- NULL
newdf[,"Data_plant_id.y"] <- NULL
newdf[,"Data_leaftype.y"] <- NULL

colnames(newdf)<-gsub("\\.x","",colnames(newdf))
newdf <- newdf %>% select(-contains(".y"))
# # add the week number based on the date
# newdf <- newdf %>%
#     mutate(week = strftime(newdf$SysObs_date, format = "%V"))

write_csv(newdf, here(DATAUSER,"final_raw_data.csv"), 
          append = FALSE, 
          col_names = TRUE)

```
