---
title: "LICOR Data Processing"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"
execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 5
---

```{r setup, include=FALSE}
#| echo: false
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
library(dplyr)
library(lubridate)
require(tidyr)
library(ggplot2)
library(here)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script is run
here::here()
# https://www.regextester.com/ for regex checking
```

## 01_load_LICOR_logs  
Currently loads one text log from a LICOR data set. It reads each chunk of data from a line with "[Header]" skipping all lines until a line "[Data]" is found. Once found all data lines are read and assigned a group number to keep the related records together. This repeats until the end of file.  
The original group names, field names, and units are stored off as text in separate dataframes from the data. There are many special characters that do not convert into column names without loss of uniqueness. The values call all be referenced by the column position.  
The consolidated data is written out to an Excel CSV type text file.

### REMARKS:
remarks fall into this block of the [Header] area
There may be zero or more remarks present.
All should be read and con-cat into one value for output.
-----
Flr. Version	1.4.22
12:44:30	Stability Definition:	A (GasEx): Slp<0.3 Per=15	gsw (GasEx): Slp<0.05 Per=15	F (FlrLS): Slp<5 Per=15
12:44:44	tc-shade5
12:44:50	tc-shade5
SysConst:AvgTime	4.0
----- 

TODO: Check that grouped data records are from the correct data set.
Averages of the groups are needed, not the raw records for analysis.

```{r load}
#| echo: true



load_data_chunks <- function(filename) {
  con <- file(filename, "rt")
  print("start")
  remarks <- "" # used to contain the list of remarks, if any
  i = 0 # used to specify which group of data is being read
  dataLines <- data.frame(matrix(ncol = 1, nrow = 0))
  colnames(dataLines) <- c("original")
  
  while (length(oneLine <- readLines(con, n = 1, skipNul = TRUE, warn = FALSE)) > 0) {
    # print(oneLine)
    
    # collect all of the remarks
    # line before actual remarks starts with "12:44:30<tab>Stability Definition:<tab>"
    # if found, skip it and start remarks collecting
    # if (str_detect(oneLine, regex("^[0-9]{2}:[0-9]{2}:[0-9]{2}\tStability Definition:\t"))) {
    #   print("---- found the BEGINING of the remarks")
    # print(oneLine)
    
    
    # read the next line and see if it is a remarks line
    # starts with "nn:nn:nn\t" followed by remarks
    # Stability Definition also starts with the "nn:nn:nn\t", make sure that is not what we found
    # while (length(oneLine <- readLines(con, n = 1, skipNul = TRUE, warn = FALSE)) > 0) {
    # if str_detect(oneLine, regex("^[0-9]{2}:[0-9]{2}:[0-9]{2}\t")) # & 
    #   # !str_detect(oneLine, regex("^[0-9]{2}:[0-9]{2}:[0-9]{2}\tStability Definition:\t"))
    # {
    #   
    #   if (remarks == "") {
    #     remarks <- str_replace(oneLine, "\t", " ")
    #   } else {
    #     oneLine <- str_replace(oneLine, "\t", " ")
    #     remarks <- paste(remarks, oneLine, sep = ", ")
    #   }
    #   }
    # 
    
    # remarks in header, not data block
    if (str_detect(oneLine, regex("^[0-9]{2}:[0-9]{2}:[0-9]{2}\t")) &
        !str_detect(oneLine, regex("^[0-9]{2}:[0-9]{2}:[0-9]{2}\tStability Definition:\t"))) 
    {
      if (remarks == "") {
        remarks <- str_replace(oneLine, "\t", " ")
      } else {
        oneLine <- str_replace(oneLine, "\t", " ")
        remarks <- paste(remarks, oneLine, sep = ", ")
      }
    }
    
    
    # read all the records in the found [Data] block
    if (str_detect(oneLine, regex("\\[Data\\]"))) {
      # print("We found data start")
      
      # sequential numbering for each group of [Data] in the file
      i = i + 1
      groupNumber = paste("group",i, sep = "")
      
      # these three groups appear after [Data] in the file
      dataGroups <- paste("data", "data", readLines(con, n = 1, skipNul = TRUE, warn = FALSE), sep = "\t")
      dataVars   <- paste("group", "remarks", readLines(con, n = 1, skipNul = TRUE, warn = FALSE), sep = "\t")
      dataUnits  <- paste("", "", readLines(con, n = 1, skipNul = TRUE, warn = FALSE), sep = "\t")
      
      # create an empty list to store all of the data records in the found block
      # read lines until it is not longer a data line
      while (length(dataLine <- readLines(con, n = 1, skipNul = TRUE, warn = FALSE)) > 0) {
        # print(dataLine)
        
        # remarks could be here too
        if (str_detect(dataLine, regex("^[0-9]{2}:[0-9]{2}:[0-9]{2}\t")) &
            !str_detect(dataLine, regex("^[0-9]{2}:[0-9]{2}:[0-9]{2}\tStability Definition:\t"))) 
        {
          if (remarks == "") {
            remarks <- str_replace(dataLine, "\t", " ")
          } else {
            dataLine <- str_replace(dataLine, "\t", " ")
            remarks <- paste(remarks, dataLine, sep = ", ")
          }
        }
        
        
        # if (str_detect(dataLine, regex("^[0-9]?\t"))) {
        # lines starts with and integer record number and tab
        if (str_detect(dataLine, regex("^[0-9]?\t")) &
            !str_detect(dataLine, regex("^[0-9]{2}:[0-9]{2}:[0-9]{2}\t"))) {
          finalString <- paste(groupNumber, remarks, dataLine, sep = "\t")
          dataLines[nrow(dataLines) + 1,] = finalString
          # } else {
          #   break
        }
        
        if (str_detect(dataLine, regex("\\[Header\\]"))) {
              remarks <- ""
          # done reading data lines from the current block
          # reset remarks for next group of data
          break
        }
      }
    }

  }
  print("stop")
  close(con)
  
  return(list(dataGroups, dataUnits, dataVars, dataLines))
  
}


# this will not work for multiple files without the structure, columns
# create df for each of the chunks of information
# output <- load_data_chunks(here("data_raw/2023-11-17-btrf/2023-11-17-1144_logdata-tc-heat"))

output <- load_data_chunks(here("data_raw/2023-09-22-B2Trf_Joost/2023-09-22-1536_logdata"))


groupsdf <- data.frame(do.call('rbind',strsplit(as.character(output[[1]]),'\t',fixed=TRUE)))
unitsdf <- data.frame(do.call('rbind',strsplit(as.character(output[[2]]),'\t',fixed=TRUE)))
varsdf <- data.frame(do.call('rbind',strsplit(as.character(output[[3]]),'\t',fixed=TRUE)))
valuesdf <- data.frame(do.call('rbind',strsplit(as.character(output[[4]][,1]),'\t',fixed=TRUE)))
# remarks <- output[5][1]

# write out a text file that Excel can read
write_csv(groupsdf, here("data_cleaned/test_licor_data_cleaned.txt"), append = FALSE, col_names = FALSE)
write_csv(varsdf, here("data_cleaned/test_licor_data_cleaned.txt"), append = TRUE, col_names = FALSE)
write_csv(unitsdf, here("data_cleaned/test_licor_data_cleaned.txt"), append = TRUE, col_names = FALSE)
write_csv(valuesdf, here("data_cleaned/test_licor_data_cleaned.txt"), append = TRUE, col_names = FALSE)
# write_csv(valuesdf, here("data_cleaned/test_licor_data_cleaned.txt"), append = TRUE, col_names = FALSE)

# 
# col_types = cols(SysObs_date = col_datetime(format = "%Y%m%d %H:%M:%S"), 
# col_types$SysObs_date <- as.Date.POSIXct(col_types$SysObs_date)


```


```{r header_add}
#| echo: true

# the original source for the fields to select out from Joost analysis file
# select_field_list <- read_csv(here("data_raw/Joost_Analysis_Sample/2023-09-22-1536_logdata_fields.csv"), 

# variable names are not unique, prepend the group to fix it
new_field_list <- paste(groupsdf[1,], varsdf[1,], sep = "_")
colnames(valuesdf) <- new_field_list #varsdf[1,]

# load the names of the columns of interest
# UTF-8 CSV text file to keep units in proper form
select_field_list <- read_csv(here("data_raw/select_logdata_fields.csv"), 
                       col_names = FALSE, 
                       # skip = 1, 
                       n_max = 2,
                       show_col_types = FALSE) 
# Append new column to front of data, group is required as column 1, remarks as column 2

# sysdf <- data.frame(c(groupsdf[1], varsdf[1]),c(groupsdf[2], varsdf[2]))
sysdf <- data.frame(matrix(ncol = 2, nrow = 2))
sysdf[1,1] <- groupsdf[1]
sysdf[1,2] <- groupsdf[1]
sysdf[2,1] <- varsdf[1]
sysdf[2,2] <- varsdf[2]
# t_select_field_list <- data.frame(col1 = c(groupsdf[1]), col2 = c("duh"), select_field_list)
select_field_list <- data.frame(sysdf, select_field_list)
# temp_select_field_list <- data.frame(str(new_field_list[1])) = new_field_list[1], col2 = new_field_list[2], select_field_list)

# variable names are not unique, prepend the group to fix it
new_select_field_list <- paste(select_field_list[1,], select_field_list[2,], sep = "_")
# new_select_field_list <- paste(select_field_list[1,], select_field_list[2,], sep = "_")
# colnames(select_field_list) <- select_field_list
colnames(unitsdf) <- new_field_list



# create a set of data that the user specified in select_field_list
final_data <- valuesdf %>% select(any_of(new_select_field_list))

# sample to get the units that are needed for selected data
# final_units <- unitsdf %>% select(any_of(new_select_field_list))

# sample code to merge df using a list by column names
# df_list <- list(final_units, final_vals)
# t <- Reduce(function(x, y) merge(x, y, all=TRUE), df_list)  

# final_data$SysObs_date <- strptime(final_data$SysObs_date, "%Y%m%d %H:%M:%S")
final_data$SysObs_date <- as.POSIXct(final_data$SysObs_date, format = "%Y%m%d %H:%M:%S")
final_data$GasEx_gsw <- as.numeric(final_data$GasEx_gsw)
write_csv(final_data, here("data_cleaned/test_licor_selected_data.csv"), append = FALSE, col_names = TRUE)

```



```{r test_graph_group2}
ggplot() +
    # geom_point(data = final_data, 
    geom_point(data=subset(final_data, data_group=="group2"), 
               aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
    # geom_line(data = final_data, aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
    # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
    # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
    # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
    # geom_line(data = final_data, aes(x = date, y = TEMP_THREE_FOOT_HEIGHT, color = "CEAC")) +
    ggtitle("LICOR Test Graph - GasEx gsw CONTROL LEAF") +
    xlab("SysObs_date") +
    ylab("GasEx_gsw") +
    scale_y_continuous(limits=c(0.0, 0.2), breaks=c(0, 0.1, 0.2, 0.5)) +
    scale_x_datetime(date_labels = ("%M:%S"),
        date_breaks = "10 sec",  expand = expansion(0)) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
    # 
  
      # scale_x_datetime(labels=date_format("%b %y"))
    #   date_breaks = "6 hours",  expand = expansion(0)) +
    
    # theme(axis.text.x=element_text(angle=60, hjust=1))



```
```{r test_graph_group3}
ggplot() +
    # geom_point(data = final_data, 
    geom_point(data=subset(final_data, data_group=="group2"), 
               aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
    # geom_line(data = final_data, aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
    # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
    # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
    # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
    # geom_line(data = final_data, aes(x = date, y = TEMP_THREE_FOOT_HEIGHT, color = "CEAC")) +
    ggtitle("LICOR Test Graph - GasEx gsw - TREATMENT LEAF") +
    xlab("SysObs_date") +
    ylab("GasEx_gsw") +
    scale_y_continuous(limits=c(0.0, 0.2), breaks=c(0, 0.1, 0.2, 0.5)) +
    scale_x_datetime(date_labels = ("%M:%S"),
        date_breaks = "10 sec",  expand = expansion(0)) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
    # 
  
      # scale_x_datetime(labels=date_format("%b %y"))
    #   date_breaks = "6 hours",  expand = expansion(0)) +
    
    # theme(axis.text.x=element_text(angle=60, hjust=1))



```