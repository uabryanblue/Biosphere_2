---
title: "LICOR Statistical Exploration"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"
execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 4
    echo: false
---

```{r setup, include=FALSE}
#| echo: false
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
library(dplyr)
library(lubridate)
require(tidyr)
library(ggplot2)
library(here)
library(patchwork)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script
here::here()
# https://www.regextester.com/ for regex checking

# constants to data paths
DATARAW <- "data_raw" 
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"
ELEVATION <- 2 # elevation of the experiment, numeric value or 2 or 3
VARNAME <- "GasEx_A" # this the column name in finaldata where the group and variable are combined

# NOTE to self: Look into these for help with graph layout\
# patchwork TODO !!!!\
# wrap plot, axis collect

```

# Report for elevation: `r ELEVATION`  
This is a lengthy exploration of data normality and variance in the Treatment and Control data from this experiment.  Much of it is for exploration and would not be needed in any final report.  

# Load Final Data  

A `final_raw_data.csv` file is used for final analysis. This is a combination of all Treatment, Control, and Reference data for all elevations that was combined from the LICOR text logs in previous steps.

Data is read from a CSV file and `type.convert()` is used to guess the data types.\
Data types that are not correct are manually set to their appropriate values.\
Data is scrubbed for `GasEx_A` \> 0. Values \<= 0 are considered invalid values.\
Data is limited to `SysObs_time` \> 1668543540 seconds, the start of the experiment.

```{r functions}
#| echo: false
#| warning: false

read_final_data <- function(filename) {
  
  # finaldata <- read_csv(here(DATAUSER,"final_raw_data.csv"), 
  finaldata <- read_csv(filename, 
                        col_names = TRUE, 
                        show_col_types = FALSE) 

# try to auto convert all data types, not all work
finaldata <- type.convert(finaldata, as.is = TRUE)
# convert values that were not correctly auto converted
# finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
# finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
# This needs converted into a true date type for graphing
finaldata$SysObs_date <-as.Date(finaldata$SysObs_date)
# error if <= 0 and arbitrary >= 7
# TODO this needs to be in the original cleaning code
#    finaldata <- finaldata %>% filter(GasEx_A > 0 & GasEx_A < 7)
    # finaldata <- finaldata %>% filter(GasEx_A > 0)

# The clock was off at one point, this needs corrected or ignore the values
# TODO this needs to bin the original cleanind code
finaldata <- finaldata %>% 
  filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
# finaldata <- finaldata %>% filter(!Filenames_filename == "2023-11-22-1138_logdata")

return(finaldata)

}

# standard plot of Treatment, Control, and Reference data
# plot_data is the df to plot 
# plantid is the elevation of interest values in the df
# sysobs is the numeric variable of interest from the LICOR log
mean_plant_data <- function(plot_data, plantid, sysobs) {
  plotdf <- plot_data %>% filter(Data_plant_id == plantid) %>%
    filter(Data_leaftype == "Treatment" | 
             Data_leaftype == "Control" | 
             Data_leaftype == "Reference") %>%
    arrange(SysObs_date)
  
  plotdf <- plotdf %>%
  group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
  summarise_at((sysobs), list(gm = mean))

  return(plotdf)
}

# basic plot of means
# plot_data is a df containing the data generated from mean_plant_data
# this df is assumed to have a column "gm" that contains the mean values
plot_means <- function(plot_data, title="", xlabel="", ylabel=""){
  plot1 <- ggplot() +
    geom_point(data=plot_data, 
              aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    # geom_line(data=plot_data, 
              # aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    ggtitle(title) +
    xlab(xlabel) +
    ylab(ylabel) +
    # scale_y_continuous(limits=c(0.0, 6.0))   +
    #     date_breaks = "10 sec",  expand = expansion(0)) +
    geom_smooth(method=lm, se=FALSE, col='red', size=2) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
  
  return(plot1)
}

# a simple normal plat
# a df plotdata has a given leaftype graphed against a given variable
# leaftype is Treatment, Control, or Reference
normal_plot <- function(plotdata, leaftype, dfvariable, title) {
  nplot <- ggplot(plotdata[plotdata$Data_leaftype==leaftype,], aes(x = get(dfvariable))) +
    stat_function(
      fun = dnorm,
      args = with(plotdata, c(mean = mean(get(dfvariable)), sd = sd(get(dfvariable))))
    ) +
    scale_x_continuous(title)
  return(nplot)
}
```


```{r lr}
filename <- here(DATAUSER,"final_data.csv")
finaldata <- read_final_data(filename)


# broken out for each of the three plots
# might be a better way, but this is more clear
newdata <- finaldata %>% filter(Data_leaftype == "Treatment" |
                                  Data_leaftype == "Reference" |
                                  Data_leaftype == "Control" &
                                  SysObs_time > 1668543540 &
                                  Data_plant_id == 2) %>% 
  arrange(SysObs_date)
# cdata <- finaldata %>% filter(Data_leaftype == "Control" & SysObs_time > 1668543540) %>% arrange(SysObs_date)
# rdata <- finaldata %>% filter(Data_leaftype == "Reference" & SysObs_time > 1668543540) %>% arrange(SysObs_date)


with(newdata, scatter.smooth(GasEx_A, GasEx_gsw, main='GasEx_A vs. GasEx_gsw'))
```