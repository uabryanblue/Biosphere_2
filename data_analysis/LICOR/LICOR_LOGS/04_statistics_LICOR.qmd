---
title: "LICOR Statistical Exploration"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"
execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 4
    echo: false
---

```{r setup, include=FALSE}
#| echo: false
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
library(dplyr)
library(lubridate)
require(tidyr)
library(ggplot2)
library(here)
library(patchwork)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script
here::here()
# https://www.regextester.com/ for regex checking

# constants to data paths
DATARAW <- "data_raw" 
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"

```

NOTE to self: Look into these for help with graph layout\
patchwork TODO !!!!\
wrap plot, axis collect

# Load Final Data

Data is read from CSV file and type.convert() is used to guess the data types.\
Data types that are not correct are manually set to their correct values.\
Data is scrubbed for GasEx_A \> 0 and \< 7, considered incorrect values.\
Data is limited to SysObs_time \> 1668543540 seconds.

```{r raw_plots}
#| echo: FALSE
#| error: TRUE
#| warning: FALSE

read_final_data <- function(filename) {
  
  # finaldata <- read_csv(here(DATAUSER,"final_raw_data.csv"), 
  finaldata <- read_csv(filename, 
  col_names = TRUE, 
  show_col_types = FALSE) 

# try to auto convert all data types, not all work
finaldata <- type.convert(finaldata, as.is = TRUE)
# convert values that were not correctly auto converted
finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
# finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
# This needs converted into a true date type for graphing
finaldata$SysObs_date <-as.Date(finaldata$SysObs_date)
# error if <= 0 and arbitrary >= 7
# TODO this needs to be in the original cleaning code
finaldata <- finaldata %>% filter(GasEx_A > 0 & GasEx_A < 7)
# The clock was off at one point, this needs corrected or ignore the values
# TODO this needs to bin the original cleanind code
finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
# finaldata <- finaldata %>% filter(!Filenames_filename == "2023-11-22-1138_logdata")

return(finaldata)

}

finaldata <- read_final_data(here(DATAUSER,"final_raw_data.csv"))

```

```{r daily_mean_data}
#| echo: false
#| warning: false
#| 
# calculate the daily means of a given column in sysobs
mean_plant_data <- function(finaldata, plantid, sysobs) {
  plotdf <- finaldata %>% filter(Data_plant_id == plantid) %>%
    filter(Data_leaftype == "Treatment" | 
             Data_leaftype == "Control" | 
             Data_leaftype == "Reference") %>%
    arrange(SysObs_date)
  
  plotdf <- plotdf %>%
  group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
  summarise_at((sysobs), list(gm = mean))

  return(plotdf)
}


plot_means <- function(plot_data, title="", xlabel="", ylabel=""){
  plot1 <- ggplot() +
    geom_point(data=plot_data, 
              aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    # geom_line(data=plot_data, 
              # aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    ggtitle(title) +
    xlab(xlabel) +
    ylab(ylabel) +
    # scale_y_continuous(limits=c(0.0, 6.0))   +
    #     date_breaks = "10 sec",  expand = expansion(0)) +
    geom_smooth(method=lm, se=FALSE, col='red', size=2) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
  
  return(plot1)
}

```

# Data Exploration

## Normality

**Does this look right?**\
*Need to double check thermocouples.* Treatment and Reference appear the same, Control looks like an expected Treatment.

Explore normality of the original and daily averaged data.

### GasEx_A Normality

## Normality All Observations

```{r graph_means}
#| echo: false
#| warning: false
#| 

normal_plot <- function(finaldata, leaftype, dfvariable, title) {
  nplot <- ggplot(finaldata[finaldata$Data_leaftype==leaftype,], aes(x = get(dfvariable))) +
    stat_function(
      fun = dnorm,
      args = with(finaldata, c(mean = mean(get(dfvariable)), sd = sd(get(dfvariable))))
    ) +
    scale_x_continuous(title)
  return(nplot)
}

# GRAPH: GasEx_A

# ALL DATA
n1plot <- normal_plot(finaldata, "Treatment", "GasEx_A", "ALL GaseEx_A Treatment, Elevation 2")
n1plot

n2plot <- normal_plot(finaldata, "Control", "GasEx_A", "ALL GaseEx_A Control, Elevation 2")
n2plot

n3plot <- normal_plot(finaldata, "Reference", "GasEx_A", "ALL GaseEx_A Reference, Elevation 2")
n3plot

n1plot / n2plot / n3plot
```

## Normality Daily Averages

Graphs to visually check for normality.

```{r}
#| echo: false
#| warning: false
#| 
# DAILY AVERAGES
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_A")

n1plot <- normal_plot(elevation2, "Treatment", "gm", "DAILY MEAN GaseEx_A Treatment, Elevation 2")
n1plot

n2plot <- normal_plot(elevation2, "Control", "gm", "DAILY MEAN GaseEx_A Control, Elevation 2")
n2plot

n3plot <- normal_plot(elevation2, "Reference", "gm", "DAILY MEAN GaseEx_A Reference, Elevation 2")
n3plot

n1plot / n2plot / n3plot
```

The graphs seem to have long tails. Check normality using statistics.

```{r}
#| echo: false
#| warning: false
qqnorm(elevation2[elevation2$Data_leaftype == "Treatment",]$gm, main = "Q-Q Plot Average Daily Mean Treatment")
qqline(elevation2[elevation2$Data_leaftype == "Treatment",]$gm)
qqnorm(elevation2[elevation2$Data_leaftype == "Control",]$gm, main = "Q-Q Plot Average Daily Mean Control")
qqline(elevation2[elevation2$Data_leaftype == "Control",]$gm)
qqnorm(elevation2[elevation2$Data_leaftype == "Reference",]$gm, main = "Q-Q Plot Average Daily Mean Reference")
qqline(elevation2[elevation2$Data_leaftype == "Reference",]$gm)
```

The first Q-Q plot (Treatment) does not look normal. It has a curve that looks exponential.\
The second Q-Q plot (Control) looks normal other than some values at the tails.\
The third Q-Q plot (Reference) shows variability in the distances, they may be consistent. The data may or may not be normal.

### Confirm using statistics

**Shapiro-Wilk Test** If the p-value is less than $α$ =.05, there is sufficient evidence to say that the sample does not come from a population that is normally distributed.

**Treatment**\
The p-value = 0.03515 for the Treatment data is significant at $α$ =.05 The Treatment data is not normal.

**Control**\
The p-value = 0.7283 for the Control data is not significant at $α$ =.05. The Control data is normal.

**Reference**\
The p-value = 0.1215 for Reference data is not significant at $α$ =.05 the Reference data is normal.

```{r}
#| echo: false
#| warning: false
shapiro.test(elevation2[elevation2$Data_leaftype == "Treatment",]$gm)

shapiro.test(elevation2[elevation2$Data_leaftype == "Control",]$gm)

shapiro.test(elevation2[elevation2$Data_leaftype == "Reference",]$gm)


```

# Are the Means equal between the Treatment and the Control?

## Perform Welch's t-test as Variances are assumed not equal.

A boxplot visually shows the Treatment and Control means are far apart and their variances are not close to each other.

```{r elev2_means_test}
#| echo: false
#| warning: false
#| 

# interested in daily means of the Treatment and Control in Elevation 2
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_A")

# create two columns of data for the Welch's t-test
Treat <- elevation2[elevation2$Data_leaftype == "Treatment",]$gm
Cont <- elevation2[elevation2$Data_leaftype == "Control",]$gm

# create a df with Treatment and Control for ggplot
new_df <- subset(elevation2, Data_leaftype != "Reference")

all2 <-  ggplot() +
  geom_boxplot(data = new_df, aes(x = Data_leaftype, y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
    # geom_boxplot(data = elevation2, aes(x = Data_leaftype , y = gm, color = Data_leaftype)) +
  # scale_y_continuous(limits=c(0.0, 0.1)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle("LICOR Daily Mean Observations for Elevation 2 on A") +
  xlab("Leaf Type") +
  ylab("GasEx_A")

all2
```

## Variance Check

The boxplot shows differences in variance.

**Bartlett test** Variance check that\
H0: The variance among each group is equal.\
HA: At least one group has a variance that is not equal to the rest.

The p-value = 0.05386 which is greater than alpha = .05, we reject H0. The variances are not equal, although the test shows them to be close.

```{r}
#| echo: false
#| warning: false
# perform variance check
bartlett.test(gm ~ Data_leaftype, data = new_df)
```

# Welch's t-test  
Used to compare the means between two independent groups when it is not assumed that the two groups have equal variances.  
H0: difference in means is 0  
HA: means are different  

*NOTE: Normality was not proven for the Treatment data, this result may be misleading.*

The p-value = 0.2378 which is greater than alpha = .05, t = -1.2292 does not fall in the confidence interval. We fail to reject the null hypothesis. The means are not significantly different.

```{r}
# perform Welch's t-test
# Variances not assumed equal
t.test(Treat, Cont)


```

# Conclusion  
Normality could not be shown for Treatment, but was for Control. The variances were close, but not equal. A Welch Two Sample t-test is robust against unequal variance, but requires normality to be satisfied. Although the test shows the means of the Treatment and Control are not significantly different, the result may be misleading.  

Possible Improvements  
Check for and remove outliers.  
Make the Control data normal using a transformation. 