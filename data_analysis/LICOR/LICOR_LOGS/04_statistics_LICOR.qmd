---
title: "LICOR Statistical Exploration"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"
execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 4
    echo: false
---

```{r setup, include=FALSE}
#| echo: false
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
library(dplyr)
library(lubridate)
require(tidyr)
library(ggplot2)
library(here)
library(patchwork)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script
here::here()
# https://www.regextester.com/ for regex checking

# constants to data paths
DATARAW <- "data_raw" 
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"
ELEVATION <- 2

```

NOTE to self: Look into these for help with graph layout\
patchwork TODO !!!!\
wrap plot, axis collect

# Load Final Data

Data is read from CSV file and type.convert() is used to guess the data types.\
Data types that are not correct are manually set to their correct values.\
Data is scrubbed for GasEx_A \> 0 and \< 7, considered incorrect values.\
Data is limited to SysObs_time \> 1668543540 seconds.

```{r functions}
#| echo: FALSE
#| error: TRUE
#| warning: FALSE

read_final_data <- function(filename) {
  
  # finaldata <- read_csv(here(DATAUSER,"final_raw_data.csv"), 
  finaldata <- read_csv(filename, 
                        col_names = TRUE, 
                        show_col_types = FALSE) 

# try to auto convert all data types, not all work
finaldata <- type.convert(finaldata, as.is = TRUE)
# convert values that were not correctly auto converted
finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
# finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
# This needs converted into a true date type for graphing
finaldata$SysObs_date <-as.Date(finaldata$SysObs_date)
# error if <= 0 and arbitrary >= 7
# TODO this needs to be in the original cleaning code
#    finaldata <- finaldata %>% filter(GasEx_A > 0 & GasEx_A < 7)
    finaldata <- finaldata %>% filter(GasEx_A > 0)

# The clock was off at one point, this needs corrected or ignore the values
# TODO this needs to bin the original cleanind code
finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
# finaldata <- finaldata %>% filter(!Filenames_filename == "2023-11-22-1138_logdata")

return(finaldata)

}


mean_plant_data <- function(plot_data, plantid, sysobs) {
  plotdf <- plot_data %>% filter(Data_plant_id == plantid) %>%
    filter(Data_leaftype == "Treatment" | 
             Data_leaftype == "Control" | 
             Data_leaftype == "Reference") %>%
    arrange(SysObs_date)
  
  plotdf <- plotdf %>%
  group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
  summarise_at((sysobs), list(gm = mean))

  return(plotdf)
}


plot_means <- function(plot_data, title="", xlabel="", ylabel=""){
  plot1 <- ggplot() +
    geom_point(data=plot_data, 
              aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    # geom_line(data=plot_data, 
              # aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    ggtitle(title) +
    xlab(xlabel) +
    ylab(ylabel) +
    # scale_y_continuous(limits=c(0.0, 6.0))   +
    #     date_breaks = "10 sec",  expand = expansion(0)) +
    geom_smooth(method=lm, se=FALSE, col='red', size=2) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
  
  return(plot1)
}
```

```{r data_wrangle}
finaldata <- read_final_data(here(DATAUSER,"final_raw_data.csv"))


# Define an observation to be an outlier if it is 1.5 times the 
# interquartile range greater than the third quartile (Q3) or 1.5 times the 
# interquartile range less than the first quartile (Q1).

# find Q1, Q3, and interquartile range for values in points column
finalTreat <- subset(finaldata, Data_leaftype == "Treatment")
Q1 <- quantile(finalTreat$GasEx_A, .25)
Q3 <- quantile(finalTreat$GasEx_A, .75)
IQR <- IQR(finalTreat$GasEx_A)
# subset data where points value is outside 1.5*IQR of Q1 and Q3
outliersTreat <- subset(finalTreat, finalTreat$GasEx_A<(Q1 - 1.5*IQR) | finalTreat$GasEx_A>(Q3 + 1.5*IQR))
newTreat <- subset(finalTreat, !(finalTreat$GasEx_A<(Q1 - 1.5*IQR) | finalTreat$GasEx_A>(Q3 + 1.5*IQR)))
outliersTreat

finalCont <- subset(finaldata, Data_leaftype == "Control")
Q1 <- quantile(finalCont$GasEx_A, .25)
Q3 <- quantile(finalCont$GasEx_A, .75)
IQR <- IQR(finalCont$GasEx_A)
# subset data where points value is outside 1.5*IQR of Q1 and Q3
outliersCont <- subset(finalCont, finalCont$GasEx_A<(Q1 - 1.5*IQR) | finalCont$GasEx_A>(Q3 + 1.5*IQR))
newCont <- subset(finalCont, !(finalCont$GasEx_A<(Q1 - 1.5*IQR) | finalCont$GasEx_A>(Q3 + 1.5*IQR)))
outliersCont

finalRef <- subset(finaldata, Data_leaftype == "Reference")
Q1 <- quantile(finalRef$GasEx_A, .25)
Q3 <- quantile(finalRef$GasEx_A, .75)
IQR <- IQR(finalRef$GasEx_A)
# subset data where points value is outside 1.5*IQR of Q1 and Q3
outliersRef <- subset(finalRef, finalRef$GasEx_A<(Q1 - 1.5*IQR) | finalRef$GasEx_A>(Q3 + 1.5*IQR))
newref <- subset(finalRef, !(finalRef$GasEx_A<(Q1 - 1.5*IQR) | finalRef$GasEx_A>(Q3 + 1.5*IQR)))
outliersRef

newfinaldata <- rbind(newTreat, newCont, newref)

# ---------------- AVERAGE DATA ----------------
# these are not necessarily needed, but cleans up code
# and reduces errors

# df - interested in daily means of the Treatment, Control, Reference
TreatContRef <- mean_plant_data(newfinaldata, ELEVATION, "GasEx_A")

# df - Treatment and Control
TreatCont <- subset(TreatContRef, Data_leaftype != "Reference")

# list - create two lists of data for the Welch's t-test
Treat <- TreatContRef[TreatContRef$Data_leaftype == "Treatment",]$gm
Cont <- TreatContRef[TreatContRef$Data_leaftype == "Control",]$gm
Ref <- TreatContRef[TreatContRef$Data_leaftype == "Reference",]$gm

```

```{r daily_mean_data}
# #| echo: false
# #| warning: false
# #| 
# # calculate the daily means of a given column in sysobs
# mean_plant_data <- function(plot_data, plantid, sysobs) {
#   plotdf <- plot_data %>% filter(Data_plant_id == plantid) %>%
#     filter(Data_leaftype == "Treatment" | 
#              Data_leaftype == "Control" | 
#              Data_leaftype == "Reference") %>%
#     arrange(SysObs_date)
#   
#   plotdf <- plotdf %>%
#   group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
#   summarise_at((sysobs), list(gm = mean))
# 
#   return(plotdf)
# }
# 
# 
# plot_means <- function(plot_data, title="", xlabel="", ylabel=""){
#   plot1 <- ggplot() +
#     geom_point(data=plot_data, 
#               aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
#     # geom_line(data=plot_data, 
#               # aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
#     ggtitle(title) +
#     xlab(xlabel) +
#     ylab(ylabel) +
#     # scale_y_continuous(limits=c(0.0, 6.0))   +
#     #     date_breaks = "10 sec",  expand = expansion(0)) +
#     geom_smooth(method=lm, se=FALSE, col='red', size=2) +
#     theme(axis.text.x=element_text(angle=60, hjust=1))
#   
#   return(plot1)
# }

```

# Data Exploration

## Normality

**Does this look right?**\
*Need to double check thermocouples.* Treatment and Reference appear the same, Control looks like an expected Treatment.

Explore normality of the original and daily averaged data.

### GasEx_A Normality

## Normality ALL Observations

```{r graph_means}
#| echo: false
#| warning: false
#| 

normal_plot <- function(plotdata, leaftype, dfvariable, title) {
  nplot <- ggplot(plotdata[plotdata$Data_leaftype==leaftype,], aes(x = get(dfvariable))) +
    stat_function(
      fun = dnorm,
      args = with(plotdata, c(mean = mean(get(dfvariable)), sd = sd(get(dfvariable))))
    ) +
    scale_x_continuous(title)
  return(nplot)
}

# GRAPH: GasEx_A

# ALL DATA
n1plot <- normal_plot(newfinaldata, "Treatment", "GasEx_A", 
                      paste("Elevation ", ELEVATION, ": Treatment - GaseEx_A", sep = ''))
n1plot

n2plot <- normal_plot(newfinaldata, "Control", "GasEx_A", 
                     paste("Elevation ", ELEVATION, ": Control - GaseEx_A", sep = ''))
n2plot

n3plot <- normal_plot(newfinaldata, "Reference", "GasEx_A", 
                      paste("Elevation ", ELEVATION, ": Reference - GaseEx_A", sep = ''))
n3plot

n1plot / n2plot / n3plot
```

## Normality Daily Averages

Graphs to visually check for normality.

```{r}
#| echo: false
#| warning: false
#| 
# # DAILY AVERAGES
# # TreatCont <- mean_plant_data(finaldata, ELEVATION, "GasEx_A")
# nt <- log(Treat)
# n1plot <- normal_plot(TreatContRef, "Treatment", "gm", 
#                       paste("Elevation ", ELEVATION, ": Treatment - Daily Mean GaseEx_A", sep = ''))
# n1plot
# 
# n1plot <- normal_plot(TreatContRef, "Treatment", "gm", 
#                       paste("Elevation ", ELEVATION, ": Treatment - Daily Mean GaseEx_A", sep = ''))
# n1plot
# 
# n2plot <- normal_plot(TreatContRef, "Control", "gm", 
#                       paste("Elevation ", ELEVATION, ": Control - Daily Mean GaseEx_A", sep = ''))
# n2plot
# 
# n3plot <- normal_plot(TreatContRef, "Reference", "gm", 
#                       paste("Elevation ", ELEVATION, ": Reference - Daily Mean GaseEx_A", sep = ''))
# n3plot
# 
# n1plot / n2plot / n3plot
```

The graphs seem to have long tails. Check normality using statistics.

```{r QQ_plots}
#| echo: false
#| warning: false

# original treatment average values, are not normal
qqnorm(Treat,
       main = paste("Q-Q Plot Elevation ", ELEVATION, ": Treatment - Daily Mean GaseEx_A", sep = ''))
qqline(Treat)
shapiro.test(Treat)

# transform using log() and the data becomes normal
nt <- log(Treat)
qqnorm(nt,
       main = paste("Q-Q Plot Elevation ", ELEVATION, ": Treatment - Daily Mean GaseEx_A", sep = ''))
qqline(nt)
shapiro.test(nt)

qqnorm(Cont,
       main = paste("Q-Q Plot Elevation ", ELEVATION, ": Control - Daily Mean GaseEx_A", sep = ''))
qqline(Cont)
shapiro.test(Cont)

qqnorm(Ref,
       main = paste("Q-Q Plot Elevation ", ELEVATION, ": Reference - Daily Mean GaseEx_A", sep = ''))
qqline(Ref)
shapiro.test(Ref)



# qqnorm(TreatContRef[TreatContRef$Data_leaftype == "Control",]$gm, 
#        main = paste("Q-Q Plot Elevation ", ELEVATION, ": Control - Daily Mean GaseEx_A", sep = ''))
# qqline(TreatContRef[TreatContRef$Data_leaftype == "Control",]$gm)
# 
# qqnorm(TreatContRef[TreatContRef$Data_leaftype == "Reference",]$gm, 
#        main = paste("Q-Q Plot Elevation ", ELEVATION, ": Reference - Daily Mean GaseEx_A", sep = ''))
# qqline(TreatContRef[TreatContRef$Data_leaftype == "Reference",]$gm)
```

The first Q-Q plot (Treatment) does not look normal. It has a curve that looks exponential.\
The second Q-Q plot (Control) looks normal other than some values at the tails.\
The third Q-Q plot (Reference) shows variability in the distances, they may be consistent. The data may or may not be normal.

### Confirm using statistics

**Shapiro-Wilk Test** If the p-value is less than $α$ =.05, the sample does not come from a normally distributed population.
H0: The data is normally distribued
HA: The data is not normally distribued

**Treatment**\
The p-value = 0.03515 for the Treatment data is significant at $α$ =.05 The Treatment data is not normal.

**Control**\
The p-value = 0.7283 for the Control data is not significant at $α$ =.05. The Control data is normal.

**Reference**\
The p-value = 0.1215 for Reference data is not significant at $α$ =.05 the Reference data is normal.

```{r}
#| echo: false
#| warning: false

shapiro.test(nt)


shapiro.test(Treat)

shapiro.test(Cont)

shapiro.test(Ref)

```

# Are the Means equal between the Treatment and the Control?

## Perform Welch's t-test as Variances are assumed not equal.

A boxplot visually shows the Treatment and Control means are far apart and their variances are not close to each other.

```{r elev2_means_test}
#| echo: false
#| warning: false

all2 <-  ggplot() +
  geom_boxplot(data = TreatCont, aes(x = Data_leaftype, y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
    # geom_boxplot(data = TreatCont, aes(x = Data_leaftype , y = gm, color = Data_leaftype)) +
  # scale_y_continuous(limits=c(0.0, 0.1)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle(paste("Elevation ", ELEVATION, " - Daily Mean Observations on GasEx_A")) +
  xlab("Leaf Type") +
  ylab("GasEx_A")

all2
```

## Variance Check

The boxplot shows differences in variance.

**Bartlett test** Variance check that\
H0: The variance among each group is equal.\
HA: At least one group has a variance that is not equal to the rest.

The p-value = 0.9662 which is greater than alpha = .05, we reject H0. The variances are not equal.

```{r}
#| echo: false
#| warning: false
# perform variance check
# TODO: add variance graphs, check this code

bartlett.test(gm ~ Data_leaftype, data = TreatCont)

```

# Welch's t-test  
Used to compare the means between two independent groups when it is not assumed that the two groups have equal variances.  
H0: difference in means is 0  
HA: means are different  

*NOTE: Normality was not proven for the Treatment data, this result may be misleading.*

The p-value = 0.0009141 which is less than alpha = .05, t = -3.8881 falls in the confidence interval [-2.4288977 -0.7326814]. We reject the null hypothesis. The means are different.

```{r}
# perform Welch's t-test
# Variances not assumed equal
t.test(Treat, Cont)


```

# Conclusion  

Normality could not be shown for Treatment, but was for Control. The variances are not equal. A Welch Two Sample t-test of unequal variance was performed, but it requires data normality to be satisfied. Although the test shows the means of the Treatment and Control are significantly different, the result may be misleading.  

Possible Improvements  
Check for and remove outliers.  
Make the Control data normal using a transformation. 