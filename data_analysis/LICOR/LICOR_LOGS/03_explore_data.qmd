---
title: "LICOR Data Processing"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"
execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 4
    echo: false

---

```{r setup, include=FALSE}
#| echo: false
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
library(dplyr)
library(lubridate)
require(tidyr)
library(ggplot2)
library(here)
library(patchwork)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script
here::here()
# https://www.regextester.com/ for regex checking

# constants to data paths
DATARAW <- "data_raw" 
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"

```
*Always Restart R before running any script!*  
# Daily Mean Functions
```{r daily_mean_data}
#| echo: false
#| warning: false
#| 
# calculate the daily means of a given column in sysobs
mean_plant_data <- function(finaldata, plantid, sysobs) {
  plotdf <- finaldata %>% filter(Data_plant_id == plantid) %>%
    filter(Data_leaftype == "Treatment" | 
             Data_leaftype == "Control" | 
             Data_leaftype == "Reference") %>%
    arrange(SysObs_date)
  
  plotdf <- plotdf %>%
  group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
  summarise_at((sysobs), list(gm = mean))

  return(plotdf)
}


plot_means <- function(plot_data, title="", xlabel="", ylabel=""){
  plot1 <- ggplot() +
    geom_point(data=plot_data, 
              aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    # geom_line(data=plot_data, 
              # aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    ggtitle(title) +
    xlab(xlabel) +
    ylab(ylabel) +
    # scale_y_continuous(limits=c(0.0, 6.0))   +
    #     date_breaks = "10 sec",  expand = expansion(0)) +
    geom_smooth(method=lm, se=FALSE, col='red', size=2) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
  
  return(plot1)
}
```
{{< pagebreak >}}

```{r plot_plant}
#| echo: false

plot_plant_line <- function(finaldata, plantid, fname, plantvar) {
# TODO the filter for the leaftype needs removed, it should graph
  # every unique leaftype passed into it, data filtering before this call
    plant <- finaldata[finaldata$Filenames_filename == fname &
                       finaldata$Data_plant_id == plantid &
                       (finaldata$Data_leaftype == "Treatment" |
                          finaldata$Data_leaftype == "Control" |
                          finaldata$Data_leaftype == "Reference")
                     , ]
  
  if (nrow(plant) > 0) {
    plot <- ggplot() +
      # geom_point(data = final_data, 
      geom_line(data=plant, 
                aes(x = SysObs_obs, y = get(plantvar), color = Data_leaftype)) +
      # geom_line(data = final_data, aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
      ggtitle(paste("LICOR Test Graph ", fname)) +
      xlab("SysObs_obs") +
      ylab(plantvar) +
      # scale_y_continuous(limits=c(0.0, 0.2), breaks=c(0, 0.1, 0.2, 0.5))   +
      # scale_x_datetime(date_labels = ("%M:%S"),
      #     date_breaks = "10 sec",  expand = expansion(0)) +
      theme(axis.text.x=element_text(angle=60, hjust=1))
  }  
  return(plot)
}

variable_boxplot <- function(finaldata, lclevel, lcvariable) {

elevation <- mean_plant_data(finaldata, lclevel, lcvariable)

p <-  ggplot() +
  geom_boxplot(data = elevation, aes(x = Data_leaftype , y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
  # scale_y_continuous(limits=c(1.0, 2.8)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle(paste("LICOR Daily Mean Observations for Elevation ", lclevel, " on ", lcvariable, sep = '')) +
  xlab("Leaf Type") +
  ylab(lcvariable)

return(p)

}

```
```{r remove_outliers}
#| echo: false

remove_outliers <- function(raw_data, FileName, varname) {

  groups <- unique(raw_data$Data_group)
  for (gr in groups) {
    
    write_csv(filter(raw_data, (Filenames_filename == FileName & Data_group == gr & GasEx_A < 0)), 
              paste(DATAUSER, "outliers.csv"), 
              append = TRUE, 
              col_names = FALSE)
    raw_data <- filter(raw_data, !(Filenames_filename == FileName & Data_group == gr & GasEx_A <= 0))
    
    # tmp <- raw_data[raw_data$Filenames_filename == FileName & raw_data$Data_group == "group1",]  # retains NA  
    tmp <- filter(raw_data, Filenames_filename == FileName & Data_group == gr) # does not retain NA
    x <- tmp[,"GasEx_A"]

    # get values of Q1, Q3, and IQR
    sm <- summary(x, digits = 8)
    
    # get IQR
    thresh <- IQR(x)
    
    Tmin = sm[2] - (1.5 * thresh) 
    Tmax = sm[5] + (1.5 * thresh) 
    
    # find outlier
    newlist <- x[which(x < Tmin | x > Tmax)]
    newlist
    
    # remove outlier
    rmout <- x[which(x > Tmin & x < Tmax)]
    rmout
    
    write_csv(filter(raw_data, (Filenames_filename == FileName & Data_group == gr & GasEx_A == newlist[1])), paste(DATAUSER, "outliers.csv"), 
              append = TRUE, 
              col_names = FALSE)
    
    raw_data <- filter(raw_data, !(Filenames_filename == FileName & Data_group == gr & GasEx_A == newlist[1])) # does not retain NA
    raw_data
  }
  
  return(raw_data)
}

```

NOTE to self: Look into these for help with graph layout  
patchwork TODO !!!!  
wrap plot, axis collect

```{r raw_plots}
#| echo: FALSE
#| error: TRUE
#| warning: FALSE


finaldata <- read_csv(here(DATAUSER,"final_raw_data.csv"), 
                      col_names = TRUE, 
                      show_col_types = FALSE) 
# try to auto convert all data types, not all work
finaldata <- type.convert(finaldata, as.is = TRUE)
# convert values that were not correctly auto converted
finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
# finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
# This needs converted into a true date type for graphing
finaldata$SysObs_date <-as.Date(finaldata$SysObs_date)
# error if <= 0
# TODO this needs to be in the original cleaning code
finaldata <- finaldata %>% filter(GasEx_A > 0)
# The clock was off at one point, this needs corrected or ignore the values
# TODO this needs to be in the original cleaning code
finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
# finaldata <- finaldata %>% filter(!Filenames_filename == "2023-11-22-1138_logdata")
```
# Plot Measurement Data By Variable  
Each daily observation data set is plotted based on a variable of interest.  
```{r }
# RAW DATA PLOTS
for (FileName in unique(finaldata$Filenames_filename)) {
  # print(paste("Generate Plot: ", FileName, " PlantID: ", 
  # print(FileName)
  # plot one days readings as a line chart
  myplot <- plot_plant_line(finaldata, 
                            plantid = finaldata[finaldata$Filenames_filename==FileName,]$Data_plant_id, 
                            FileName, "GasEx_A")
  print(myplot)
}

```
{{< pagebreak >}}


# Daily Means Graphs
__dates issues need filled in here__

Elevation 2 graphs are the most complete as elevation 3 did not have accurate data collection until mid-February. Thermocouple movement caused misleading readings.  

The long consistent negative slope is due to a lack of measurements for several weeks before January until the start of January. 

## LICOR Daily Mean Observations on GasEx_A  

```{r graph_means_GasEx_A}
#| echo: false
#| warning: false
#| 
# GRAPH: GasEx_A
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_A")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_A", "SysObs_date", "GasEx_A") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_A")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_A", "SysObs_date", "GasEx_A") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_A")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_A")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```

{{< pagebreak >}}

## LICOR Daily Mean Observations on GasEx_gsw  

```{r graph_means_GasEx_gsw}
#| echo: false
#| warning: false
#| 
# GRAPH: GasEx_gsw
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_gsw")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_gsw", "SysObs_date", "GasEx_gsw") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_gsw")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_gsw", "SysObs_date", "GasEx_gsw") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_gsw")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_gsw")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```
{{< pagebreak >}}

## LICOR Daily Mean Observations on GasEx_VPDleaf

```{r graph_means_GasEx_VPDleaf}
#| echo: false
#| warning: false
#| 
# GRAPH: GasEx_VPDleaf
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_VPDleaf")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_VPDleaf", "SysObs_date", "GasEx_VPDleaf") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_VPDleaf")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_VPDleaf", "SysObs_date", "GasEx_VPDleaf") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_VPDleaf")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_VPDleaf")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```
{{< pagebreak >}}

## LICOR Daily Mean Observations on Meas_Tleaf

```{r graph_means_Meas_Tleaf}
#| echo: false
#| warning: false
#| 
# GRAPH: Meas_Tleaf
elevation2 <- mean_plant_data(finaldata, "2", "Meas_Tleaf")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means Meas_Tleaf", "SysObs_date", "Meas_Tleaf") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_A")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means Meas_Tleaf", "SysObs_date", "Meas_Tleaf") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "Meas_Tleaf")
pb3 <- variable_boxplot(finaldata, "3", "Meas_Tleaf")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```


```{r variable_selection_for_testing}
# t <- finaldata %>% 
#   filter(Filenames_filename == "2024-03-06-1151_logdata_lvl2") %>%
#   filter(Data_leaftype == "Treatment" |
#            Data_leaftype == "Control" |
#            Data_leaftype == "Reference") %>%
#   select("Filenames_filename", "Data_leaftype", "GasEx_VPDleaf", "Meas_CO2_r", "Meas_Tleaf", "GasEx_RHcham" )


```

