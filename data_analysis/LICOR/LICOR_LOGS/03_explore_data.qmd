---
title: "LICOR Data Processing"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"
execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 4
    echo: false

---
NOTE to self: Look into these for help with graph layout  
patchwork TODO !!!!  
wrap plot, axis collect

```{r raw_plots}
#| echo: FALSE
#| error: TRUE
#| warning: FALSE

read_and_clean_data <- function(filename) {
  # TODO this fails unless r is restarted first! WHY?
  fname <- here(DATAUSER, "final_raw_data.csv")
  finaldata <- read_csv(fname, # "final_raw_data.csv"
                        col_names = TRUE, 
                        show_col_types = FALSE) 
  
# change any value in the df that is < zero to NA, invalid data
finaldata[finaldata < 0] <- NA
# set to NA based on column and condition
# finaldata <- finaldata %>% mutate(GasEx_A = replace(GasEx_A, which(GasEx_A > 13L), NA))

t<- finaldata[finaldata$GasEx_A > 5,]$GasEx_A

  # try to auto convert all data types, not all work
  finaldata <- type.convert(finaldata, as.is = TRUE)
  # convert values that were not correctly auto converted
  # TODO add in the type cleanup code, or new function
  finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
  finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
  finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
  # finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
  # This needs converted into a true date type for graphing
  # add a column of just the data value
  finaldata$SysObs_date <- as.Date(finaldata$SysObs_date)
  
  # bad values if <= 0, and only interested in valid leaf types
  #filter(varname > 0) %>%
  finaldata <- finaldata %>% 
    filter(Data_leaftype == "Treatment" |
             Data_leaftype == "Control" |
             Data_leaftype == "Reference") 
  # The clock was off at one point, this needs corrected or ignore the values
  # TODO this needs to be in the original cleaning code
  # bad values if < 0, and only interested in valid leaf types
  finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
  # finaldata <- finaldata %>% filter(!Filenames_filename == "2023-11-22-1138_logdata")
  
  return(finaldata)
}

finaldata <- read_and_clean_data("final_raw_data.csv")
```


```{r setup, include=FALSE}
#| echo: false

knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
library(plyr)
library(lubridate)
require(tidyr)
library(ggplot2)
library(here)
library(patchwork)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script
here::here()
# https://www.regextester.com/ for regex checking

# constants to data paths
DATARAW <- "data_raw" 
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"

```
*Always Restart R before running any script!*  
# Daily Mean Functions
```{r daily_mean_data}
#| echo: false
#| warning: false

# calculate the daily means of a given column in sysobs
mean_plant_data <- function(finaldata, plantid, sysobs) {
  plotdf <- finaldata %>% filter(Data_plant_id == plantid) %>%
    filter(Data_leaftype == "Treatment" | 
             Data_leaftype == "Control" | 
             Data_leaftype == "Reference") %>%
    arrange(SysObs_date)
  
  plotdf <- plotdf %>%
    group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
    summarise_at((sysobs), list(gm = mean))
  
  return(plotdf)
}

plot_means <- function(plot_data, title="", xlabel="", ylabel=""){
  plot1 <- ggplot() +
    geom_point(data=plot_data, 
               aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    # geom_line(data=plot_data, 
    # aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    ggtitle(title) +
    xlab(xlabel) +
    ylab(ylabel) +
    # scale_y_continuous(limits=c(0.0, 6.0))   +
    #     date_breaks = "10 sec",  expand = expansion(0)) +
    geom_smooth(method=lm, se=FALSE, col='red', size=2) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
  
  return(plot1)
}
```
{{< pagebreak >}}

```{r plot_plant}
#| echo: false

plot_plant_line <- function(finaldata, plantid, fname, plantvar) {
  # TODO the filter for the leaftype needs removed, it should graph
  # every unique leaftype passed into it, data filtering before this call
  plant <- finaldata[finaldata$Filenames_filename == fname &
                       finaldata$Data_plant_id == plantid &
                       (finaldata$Data_leaftype == "Treatment" |
                          finaldata$Data_leaftype == "Control" |
                          finaldata$Data_leaftype == "Reference"), ]
  
  if (nrow(plant) > 0) {
    plot <- ggplot() +
      # geom_point(data = final_data, 
      geom_line(data=plant, 
                aes(x = SysObs_obs, y = get(plantvar), color = Data_leaftype)) +
      # geom_line(data = final_data, aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
      ggtitle(paste("Level ", plantid, " LICOR Readings ", fname)) +
      xlab("SysObs_obs") +
      ylab(plantvar) +
      # scale_y_continuous(limits=c(0.0, 0.2), breaks=c(0, 0.1, 0.2, 0.5))   +
      # scale_x_datetime(date_labels = ("%M:%S"),
      #     date_breaks = "10 sec",  expand = expansion(0)) +
      theme(axis.text.x=element_text(angle=60, hjust=1))
  }  
  return(plot)
}

variable_boxplot <- function(finaldata, lclevel, lcvariable) {
  
  elevation <- mean_plant_data(finaldata, lclevel, lcvariable)
  
  p <- ggplot() +
    geom_boxplot(data = elevation, aes(x = Data_leaftype , y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
    # scale_y_continuous(limits=c(1.0, 2.8)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
    ggtitle(paste("LICOR Daily Mean Observations for Elevation ", lclevel, " on ", lcvariable, sep = '')) +
    xlab("Leaf Type") +
    ylab(lcvariable)
  
  return(p)
  
}

```


https://www.reneshbedre.com/blog/find-outliers.html

## Example IQR
x = c(10,4,6,8,9,8,7,6,12,14,11,9,8,4,5,10,14,12,15,7,10,14,24,28)

# get values of Q1, Q3, and IQR
summary(x)
Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
4.00    7.00    9.50   10.62   12.50   28.00 

# get IQR
IQR(x)
[1] 5.5

# get threshold values for outliers
Tmin = 7-(1.5*5.5) 
Tmax = 12.50+(1.5*5.5) 

# find outlier
x[which(x < Tmin | x > Tmax)]
[1] 24 28

# remove outlier
x[which(x > Tmin & x < Tmax)]
[1] 10  4  6  8  9  8  7  6 12 14 11  9  8  4  5 10 14 12 15  7 10 14

```{r remove_outliers}
#| echo: false

remove_outliers <- function(indata, elevation, leaftype, varname) {
  # elevation <- 3
  # varname <- "GasEx_A"
  # indata <- finaldata
  # 
  # leaftype <- "Reference"
  # leaftype <- "Control"
  # leaftype <- "Treatment"
  
  
  raw_data <- indata %>% filter(Data_plant_id == elevation 
                                & get(varname) > 0 
                                & Data_leaftype == leaftype)
  
  
  x <- raw_data %>% select(varname)
  # turn x into a vector
  x <- x[[varname]]
  
  
  # get values of Q1, Q3, and IQR
  # 8 => The resulting quantile estimates are approximately median-unbiased 
  # regardless of the distribution of x.
  sm <- summary(x, digits = 4)
  
  # get IQR
  thresh <- IQR(x)
  
  Tmin = sm[2] - (3 * thresh)
  Tmax = sm[5] + (3 * thresh)
  
  # find outlier
  newlist <- x[which(x < Tmin | x > Tmax)]
  newlist
  
  # print(paste("Removed: ", newlist, sep = '') 
  
  # remove outlier
  rmout <- x[which(x > Tmin & x < Tmax)]
  rmout
  
  # print(paste("OUTLIERS: ", cat(newlist), sep = '' ))
  
  # print(paste("RESULT: ", cat(rmout)))
  
  no_outliers <- raw_data[ raw_data[[varname]] %in% rmout, ]
  
  # raw_data <- filter(raw_data, (GasEx_A != newlist[1])) # does not retain NA
  
  
  return(no_outliers)
}


remove_observation_outliers <- function(indata, elevation, leaftype, varname) {
  # testing data
  # indata <- finaldata
  # filename <- "2023-12-15-1126_logdata"
  # elevation <- 2
  # leaftype <- "Treatment"
  # varname <- "GasEx_A"
  # gr <- filename
  
  # init df for final output
  no_outliers <- data.frame()
  
  # break in to observation groups and process at this level
  # not entire population of leaf type
  groups <- unique(indata$Filenames_filename)
  # TODO removed loop for testing
  for (gr in groups) {
    
    # deugging
    # write_csv(filter(raw_data, (Filenames_filename == FileName & Data_group == gr)), 
    #           paste(DATAUSER, "outliers.csv"), 
    #           append = TRUE, 
    #           col_names = FALSE)
    # select all data from one log, for a given elevation and leaftype
    outlier_data <- filter(indata, (Filenames_filename == gr &
                                      Data_plant_id == elevation & 
                                      Data_leaftype == leaftype))
    
    # tmp <- raw_data[raw_data$Filenames_filename == FileName & raw_data$Data_group == "group1",]  # retains NA  
    # tmp <- filter(raw_data, Filenames_filename == FileName & Data_group == gr) # does not retain NA
    x <- outlier_data[,varname]
    x <- x[[varname]]
    # get values of Q1, Q3, and IQR
    sm <- summary(x, digits = 8)
    
    # get IQR
    thresh <- IQR(x)
    
    Tmin = sm[2] - (1.5 * thresh) 
    Tmax = sm[5] + (1.5 * thresh) 
    
    # find outlier
    newlist <- x[which(x < Tmin | x > Tmax)]
    # newlist
    print(paste("Data Group: ", gr, " OUTLIERS: ", cat(newlist), sep = '' ))
    
    # remove outlier
    rmout <- x[which(x > Tmin & x < Tmax)]
    # rmout
    
    # write_csv(filter(raw_data, (Filenames_filename == gr & GasEx_A == newlist[1])), paste(DATAUSER, "outliers.csv"), 
    #           append = TRUE, 
    #           col_names = FALSE)
    
    no_outliers <- rbind(no_outliers, outlier_data[ outlier_data[[varname]] %in% rmout, ])
    
  }
  
  return(no_outliers)
  
}

```
# Plot Measurement Data By Variable  
Each daily observation data set is plotted based on a variable of interest.  
```{r }
# t <- finaldata %>% filter(Data_leaftype == "Reference") %>% select(GasEx_A)

# TODO testing, hard code for now
# elevation <- 2
# filename <- "2023-12-15-1126_logdata"
varname <- "GasEx_A"


# remove outliers based on the ENTIRE SET of data
# outlier_dataT2 <- remove_outliers(finaldata, 2, "Treatment", varname)
# outlier_dataC2 <- remove_outliers(finaldata, 2, "Control", varname)
# outlier_dataR2 <- remove_outliers(finaldata, 2, "Reference", varname)
# outlier_data <- rbind(outlier_dataT2, outlier_dataC2, outlier_dataR2)
# 
# outlier_dataR3 <- remove_outliers(finaldata, 3, "Reference", varname)
# outlier_dataT3 <- remove_outliers(finaldata, 3, "Treatment", varname)
# outlier_dataC3 <- remove_outliers(finaldata, 3, "Control", varname)
# finaldata <- rbind(outlier_data, outlier_dataT3, outlier_dataC3, outlier_dataR3)

# remove outliers on an OBSERVATION SET of values 
# outlier_dataT2 <- remove_observation_outliers(finaldata, 2, "Treatment", varname)
# outlier_dataC2 <- remove_observation_outliers(finaldata, 2, "Control", varname)
# outlier_dataR2 <- remove_observation_outliers(finaldata, 2, "Reference", varname)
# outlier_data <- rbind(outlier_dataT2, outlier_dataC2, outlier_dataR2)
# 
# outlier_dataR3 <- remove_observation_outliers(finaldata, 3, "Reference", varname)
# outlier_dataT3 <- remove_observation_outliers(finaldata, 3, "Treatment", varname)
# outlier_dataC3 <- remove_observation_outliers(finaldata, 3, "Control", varname)
# finaldata <- rbind(outlier_data, outlier_dataT3, outlier_dataC3, outlier_dataR3)

# RAW DATA PLOTS
# process_data <- finaldata
# process_data <- no_zero_data



# finaldata <- process_data
for (FileName in unique(finaldata$Filenames_filename)) {
  # print(paste("Generate Plot: ", FileName, " PlantID: ", 
  # print(FileName)
  
  # plot one days readings as a line chart
  myplot <- plot_plant_line(finaldata, 
                            plantid = finaldata[finaldata$Filenames_filename==FileName,]$Data_plant_id, 
                            FileName, 
                            varname)
  print(myplot)
}

```
{{< pagebreak >}}


# Daily Means Graphs
__dates issues need filled in here__

Elevation 2 graphs are the most complete as elevation 3 did not have accurate data collection until mid-February. Thermocouple movement caused misleading readings.  

The long consistent negative slope is due to a lack of measurements for several weeks before January until the start of January. 

## LICOR Daily Mean Observations on GasEx_A  

```{r graph_means_GasEx_A}
#| echo: false
#| warning: false


# GRAPH: GasEx_A
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_A")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_A", "SysObs_date", "GasEx_A") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_A")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_A", "SysObs_date", "GasEx_A") 

plot2
plot3

# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_A")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_A")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


# 
# elevation2 <- mean_plant_data(outlier_data, "2", "GasEx_A")
# plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_A", "SysObs_date", "GasEx_A") 
# elevation3 <- mean_plant_data(outlier_data, "3", "GasEx_A")
# plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_A", "SysObs_date", "GasEx_A") 
# 
# plot2
# plot3
# 
# # use patchwork to arrange the two plots on top of each other for comparison
# plot2 / plot3
# 
# pb2 <- variable_boxplot(outlier_data, "2", "GasEx_A")
# pb3 <- variable_boxplot(outlier_data, "3", "GasEx_A")
# 
# pb2
# pb3
# # use patchwork to arrange the two plots on top of each other for comparison
# pb2 / pb3


```

{{< pagebreak >}}

## LICOR Daily Mean Observations on GasEx_gsw  

```{r graph_means_GasEx_gsw}
#| echo: false
#| warning: false

# GRAPH: GasEx_gsw
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_gsw")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_gsw", "SysObs_date", "GasEx_gsw") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_gsw")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_gsw", "SysObs_date", "GasEx_gsw") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_gsw")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_gsw")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```
{{< pagebreak >}}

## LICOR Daily Mean Observations on GasEx_VPDleaf

```{r graph_means_GasEx_VPDleaf}
#| echo: false
#| warning: false
#| 
# GRAPH: GasEx_VPDleaf
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_VPDleaf")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_VPDleaf", "SysObs_date", "GasEx_VPDleaf") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_VPDleaf")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_VPDleaf", "SysObs_date", "GasEx_VPDleaf") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_VPDleaf")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_VPDleaf")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```
{{< pagebreak >}}

## LICOR Daily Mean Observations on Meas_Tleaf

```{r graph_means_Meas_Tleaf}
#| echo: false
#| warning: false
#| 
# GRAPH: Meas_Tleaf
elevation2 <- mean_plant_data(finaldata, "2", "Meas_Tleaf")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means Meas_Tleaf", "SysObs_date", "Meas_Tleaf") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_A")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means Meas_Tleaf", "SysObs_date", "Meas_Tleaf") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "Meas_Tleaf")
pb3 <- variable_boxplot(finaldata, "3", "Meas_Tleaf")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```


```{r test_error_bars2}

# testing error bars in plots

ELEVATION <- 2
VARNAME <- "GasEx_A"
# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Treatment" | 
           Data_leaftype == "Control" | 
           Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummary <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), summarise,
                  mean = round(mean(get(VARNAME)), 2),
                  sd = round(sd(get(VARNAME)), 2))
esummary <- na.omit(esummary)

dispvarname <- str_split(VARNAME, "_")[[1]][2]

p1 <- ggplot(esummary, 
             aes(x = SysObs_date, y = mean, color = Data_leaftype, 
                 group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
                position = position_dodge(0.9), width = 0.2) +
  geom_line(linewidth = 0.3) +
  geom_point(size = 2) +
  scale_color_manual(name='Leaf',
                     breaks=c('Treatment', 'Control', 'Reference'),
                     values=c('Treatment'='#F8766D', 'Control'='#619CFF', 'Reference'='#00BA38'))+
  theme(axis.text.x=element_text(angle=60, hjust=1)) + 
  scale_x_date(date_breaks = "1 week", date_labels =  "%b %d") +
  ggtitle(paste("Weekly Mean ", dispvarname, " for Elevation ", ELEVATION, sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("mean ", dispvarname, " (µmol m⁻² s⁻¹)", sep = '')) 

p1

p2 <- ggplot(esummary, aes(x=SysObs_date, y=mean, color = Data_leaftype, group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), position = position_dodge(0.9), width = 0.2) +
  # geom_line(size= 0.2) +
  geom_point(size = 2)

p1/p2

```


```{r test_error_bars3}

# testing error bars in plots


# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
ELEVATION <- 3
VARNAME <- "GasEx_A"
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Treatment" | 
           Data_leaftype == "Control" | 
           Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummary <- plyr::ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), summarise,
                        mean = round(mean(get(VARNAME)), 2),
                        sd = round(sd(get(VARNAME)), 2))
esummary <- na.omit(esummary)


p1 <- ggplot(esummary, 
             aes(x = SysObs_date, y = mean, color = Data_leaftype, 
                 group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), 
                position = position_dodge(0.9), width = .2) +
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  theme(axis.text.x=element_text(angle=60, hjust=1)) + 
  scale_x_date(date_breaks = "1 week", date_labels =  "%b %d") +
  ggtitle(paste("Daily Mean ", VARNAME, " Observations for Elevation ", ELEVATION, sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("mean ", VARNAME, sep = '')) 

p1

p2 <- ggplot(esummary, aes(x=SysObs_date, y=mean, color = Data_leaftype,group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), position = position_dodge(0.9), width = .2) +
  # geom_line(size= 0.2) +
  geom_point(size = 2)

p1/p2

```

