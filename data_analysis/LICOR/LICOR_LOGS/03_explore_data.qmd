---
title: "LICOR Data Processing"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"
execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 4
    echo: false

---

```{r setup, include=FALSE}
#| echo: false
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
library(dplyr)
library(lubridate)
require(tidyr)
library(ggplot2)
library(here)
library(patchwork)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script
here::here()
# https://www.regextester.com/ for regex checking

# constants to data paths
DATARAW <- "data_raw" 
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"

```

```{r plot_plant}
#| echo: false

plot_plant_line <- function(finaldata, plantid, fname, plantvar) {
# TODO the filter for the leaftype needs removed, it should graph
  # every unique leaftype passed into it, data filtering before this call
    plant <- finaldata[finaldata$Filenames_filename == fname &
                       finaldata$Data_plant_id == plantid &
                       (finaldata$Data_leaftype == "Treatment" |
                          finaldata$Data_leaftype == "Control" |
                          finaldata$Data_leaftype == "Reference")
                     , ]
  
  if (nrow(plant) > 0) {
    plot <- ggplot() +
      # geom_point(data = final_data, 
      geom_line(data=plant, 
                aes(x = SysObs_obs, y = get(plantvar), color = Data_leaftype)) +
      # geom_line(data = final_data, aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
      ggtitle(paste("LICOR Test Graph ", fname)) +
      xlab("SysObs_obs") +
      ylab(plantvar) +
      # scale_y_continuous(limits=c(0.0, 0.2), breaks=c(0, 0.1, 0.2, 0.5))   +
      # scale_x_datetime(date_labels = ("%M:%S"),
      #     date_breaks = "10 sec",  expand = expansion(0)) +
      theme(axis.text.x=element_text(angle=60, hjust=1))
  }  
  return(plot)
}

# ggplot() +
#     # geom_point(data = final_data,
#     geom_point(data=subset(final_data, data_group=="group1"),
#                aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
#     # geom_line(data = final_data, aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
#     # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
# #     # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
# #     # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
# #     # geom_line(data = final_data, aes(x = date, y = TEMP_THREE_FOOT_HEIGHT, color = "CEAC")) +
# #     ggtitle("LICOR Test Graph - GasEx gsw - REFERENCE LEAF") +
# #     xlab("SysObs_date") +
# #     ylab("GasEx_gsw") +
# #     scale_y_continuous(limits=c(0.0, 0.2), breaks=c(0, 0.1, 0.2, 0.5)) +
# #     scale_x_datetime(date_labels = ("%M:%S"),
# #         date_breaks = "10 sec",  expand = expansion(0)) +
# #     theme(axis.text.x=element_text(angle=60, hjust=1))
```

NOTE to self: Look into these for help with graph layout  
patchwork TODO !!!!  
wrap plot, axis collect

```{r raw_plots}
#| echo: FALSE
#| error: TRUE
#| warning: FALSE
#| 
finaldata <- read_csv(here(DATAUSER,"final_raw_data.csv"), 
                      col_names = TRUE, 
                      show_col_types = FALSE) 
# try to auto convert all data types, not all work
finaldata <- type.convert(finaldata, as.is = TRUE)
# convert values that were not correctly auto converted
finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
# finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
# This needs converted into a true date type for graphing
finaldata$SysObs_date <-as.Date(finaldata$SysObs_date)
# error if <= 0 and arbitrary >= 7
# TODO this needs to be in the original cleaning code
finaldata <- finaldata %>% filter(GasEx_A > 0 & GasEx_A < 7)
# The clock was off at one point, this needs corrected or ignore the values
# TODO this needs to bin the original cleanind code
finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
# finaldata <- finaldata %>% filter(!Filenames_filename == "2023-11-22-1138_logdata")

# RAW DATA PLOTS
for (FileName in unique(finaldata$Filenames_filename)) {
  # print(paste("Generate Plot: ", FileName, " PlantID: ", 
  # print(FileName)
  # plot one days readings as a line chart
  myplot <- plot_plant_line(finaldata, 
                            plantid = finaldata[finaldata$Filenames_filename==FileName,]$Data_plant_id, 
                            FileName, "GasEx_A")
  print(myplot)
}

```
{{< pagebreak >}}
# Daily Mean Functions
```{r daily_mean_data}
#| echo: false
#| warning: false
#| 
# calculate the daily means of a given column in sysobs
mean_plant_data <- function(finaldata, plantid, sysobs) {
  plotdf <- finaldata %>% filter(Data_plant_id == plantid) %>%
    filter(Data_leaftype == "Treatment" | 
             Data_leaftype == "Control" | 
             Data_leaftype == "Reference") %>%
    arrange(SysObs_date)
  
  plotdf <- plotdf %>%
  group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
  summarise_at((sysobs), list(gm = mean))

  return(plotdf)
}


plot_means <- function(plot_data, title="", xlabel="", ylabel=""){
  plot1 <- ggplot() +
    geom_point(data=plot_data, 
              aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    # geom_line(data=plot_data, 
              # aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    ggtitle(title) +
    xlab(xlabel) +
    ylab(ylabel) +
    # scale_y_continuous(limits=c(0.0, 6.0))   +
    #     date_breaks = "10 sec",  expand = expansion(0)) +
    geom_smooth(method=lm, se=FALSE, col='red', size=2) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
  
  return(plot1)
}
```

{{< pagebreak >}}
# Daily Means Graphs
### dates need filled in here

Elevation 2 graphs are the most complete as elevation 3 did not have accurate data collection until mid-February. Thermocouple movement caused misleading readings.  

The long consistent negative slope is due to a lack of measurements for several weeks before January until the start of January. 
```{r graph_means}
#| echo: false
#| warning: false
#| 
# GRAPH: GasEx_A
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_A")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_A", "SysObs_date", "GasEx_A") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_A")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_A", "SysObs_date", "GasEx_A") 

# plot2
# plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

# GRAPH: GasEx_gsw
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_gsw")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_gsw", "SysObs_date", "GasEx_gsw") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_gsw")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_gsw", "SysObs_date", "GasEx_gsw") 

# plot2
# plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

# GRAPH: GasEx_VPDleaf
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_VPDleaf")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means GasEx_VPDleaf", "SysObs_date", "GasEx_VPDleaf") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_VPDleaf")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means GasEx_VPDleaf", "SysObs_date", "GasEx_VPDleaf") 

# plot2
# plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

# GRAPH: Meas_Tleaf
elevation2 <- mean_plant_data(finaldata, "2", "Meas_Tleaf")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Means Meas_Tleaf", "SysObs_date", "Meas_Tleaf") 
elevation3 <- mean_plant_data(finaldata, "3", "Meas_Tleaf")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Means Meas_Tleaf", "SysObs_date", "Meas_Tleaf") 

# plot2
# plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

```
{{< pagebreak >}}
# LICOR Daily Mean Observations on GasEx_A  

```{r}
#| echo: false
#| warning: false
#| 
# THIS IS NOT DONE OR TESTED

# # TODO break into function
# p2 <- filter(finaldata, Data_plant_id == 2 & (Data_leaftype == "Treatment" | Data_leaftype == "Control" | Data_leaftype == "Reference"))

# A
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_A")

all2 <-  ggplot() +
  geom_boxplot(data = elevation2, aes(x = Data_leaftype , y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
  scale_y_continuous(limits=c(0.0, 5.0)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle("LICOR Daily Mean Observations for Elevation 2 on A") +
  xlab("Leaf Type") +
  ylab("A")

all2

# # TODO break into function
# p3 <- filter(finaldata, Data_plant_id == 3 & (Data_leaftype == "Treatment" | Data_leaftype == "Control" | Data_leaftype == "Reference"))
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_A")

all3 <-  ggplot() +
  geom_boxplot(data = elevation3, aes(x = Data_leaftype , y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
  scale_y_continuous(limits=c(0.0, 5.0)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle("LICOR Daily Mean Observations for Elevation 3 on A") +
  xlab("Leaf Type") +
  ylab("A")

all3

all2 / all3
```

{{< pagebreak >}}

# LICOR Daily Mean Observations on GasEx_gsw  

```{r davg_GasEx_VPDleaf}
#| echo: false
#| warning: false
#| 
# GSW
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_gsw")

all2 <-  ggplot() +
  # geom_boxplot(data = elevation2, aes(x = Data_leaftype , y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
    geom_boxplot(data = elevation2, aes(x = Data_leaftype , y = gm, color = Data_leaftype)) +
  scale_y_continuous(limits=c(0.0, 0.1)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle("LICOR Daily Mean Observations for Elevation 2 on gsw") +
  xlab("Leaf Type") +
  ylab("GasEx_gsw")

all2

# # TODO break into function
# p3 <- filter(finaldata, Data_plant_id == 3 & (Data_leaftype == "Treatment" | Data_leaftype == "Control" | Data_leaftype == "Reference"))
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_gsw")

all3 <-  ggplot() +
  geom_boxplot(data = elevation3, aes(x = Data_leaftype , y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
  scale_y_continuous(limits=c(0.0, 0.1)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle("LICOR Daily Mean Observations for Elevation 3 on gsw") +
  xlab("Leaf Type") +
  ylab("GasEx_gsw")

all3

all2 / all3
```

{{< pagebreak >}}

# LICOR Daily Mean Observations on GasEx_VPDleaf
```{r davg_GasEx_VPDleaf}
#| echo: false
#| warning: false
#| 

# Leaf VPD
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_VPDleaf")

all2 <-  ggplot() +
  geom_boxplot(data = elevation2, aes(x = Data_leaftype , y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
  scale_y_continuous(limits=c(1.0, 2.8)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle("LICOR Daily Mean Observations for Elevation 2 on Leaf VPD") +
  xlab("Leaf Type") +
  ylab("GasEx_VPDleaf")

all2

# # TODO break into function
# p3 <- filter(finaldata, Data_plant_id == 3 & (Data_leaftype == "Treatment" | Data_leaftype == "Control" | Data_leaftype == "Reference"))
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_VPDleaf")

all3 <-  ggplot() +
  geom_boxplot(data = elevation3, aes(x = Data_leaftype , y = gm, color = Data_leaftype), outlier.color = "red", outlier.size = 3) +
  scale_y_continuous(limits=c(1.0, 2.8)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
  ggtitle("LICOR Daily Mean Observations for Elevation 3 on Leaf VPD") +
  xlab("Leaf Type") +
  ylab("GasEx_VPDleaf")

all3

all2 / all3



```
