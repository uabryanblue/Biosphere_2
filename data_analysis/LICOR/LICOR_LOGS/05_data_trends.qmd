---
title: "LICOR Data Processing"
author: "Bryan Blue"
e-mail: 'bryanblue@arizona.edu'
date: "Last Generated: `r Sys.Date()`"
execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 4
    echo: false

---

```{r setup, include=FALSE}
#| echo: false
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
library(plyr)
library(dplyr)
library(lubridate)
require(tidyr)
library(ggplot2)
library(here)
library(patchwork)

# start in the current project directory
# this ensures relative paths will work
# independent of the location the script
here::here()
# https://www.regextester.com/ for regex checking

# constants to data paths
DATARAW <- "data_raw" 
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"
ELEVATION <- 2 # elevation of the experiment, numeric value of 2 or 3
VARNAME <- "GasEx_A" # this the column name in finaldata where the group and variable are combined

```

```{r plot_plant}
#| echo: false

plot_plant_line <- function(finaldata, plantid, fname, plantvar) {
  # TODO the filter for the leaftype needs removed, it should graph
  # every unique leaftype passed into it, data filtering before this call
  plant <- finaldata[finaldata$Filenames_filename == fname &
                       finaldata$Data_plant_id == plantid &
                       (finaldata$Data_leaftype == "Treatment" |
                          finaldata$Data_leaftype == "Control" |
                          finaldata$Data_leaftype == "Reference")
                     , ]
  
  if (nrow(plant) > 0) {
    plot <- ggplot() +
      # geom_point(data = final_data, 
      geom_line(data=plant, 
                aes(x = SysObs_obs, y = get(plantvar), color = Data_leaftype)) +
      # geom_line(data = final_data, aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
      ggtitle(paste("LICOR Test Graph ", fname)) +
      xlab("SysObs_obs") +
      ylab(plantvar) +
      # scale_y_continuous(limits=c(0.0, 0.2), breaks=c(0, 0.1, 0.2, 0.5))   +
      # scale_x_datetime(date_labels = ("%M:%S"),
      #     date_breaks = "10 sec",  expand = expansion(0)) +
      theme(axis.text.x=element_text(angle=60, hjust=1))
  }  
  return(plot)
}

# ggplot() +
#     # geom_point(data = final_data,
#     geom_point(data=subset(final_data, data_group=="group1"),
#                aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
#     # geom_line(data = final_data, aes(x = SysObs_date, y = GasEx_gsw, color = "GasEx_gsw")) +
#     # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
# #     # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
# #     # geom_line(data = final_data, aes(x = date, y = temperature, color = sensor_id)) +
# #     # geom_line(data = final_data, aes(x = date, y = TEMP_THREE_FOOT_HEIGHT, color = "CEAC")) +
# #     ggtitle("LICOR Test Graph - GasEx gsw - REFERENCE LEAF") +
# #     xlab("SysObs_date") +
# #     ylab("GasEx_gsw") +
# #     scale_y_continuous(limits=c(0.0, 0.2), breaks=c(0, 0.1, 0.2, 0.5)) +
# #     scale_x_datetime(date_labels = ("%M:%S"),
# #         date_breaks = "10 sec",  expand = expansion(0)) +
# #     theme(axis.text.x=element_text(angle=60, hjust=1))
```

NOTE to self: Look into these for help with graph layout  
patchwork TODO !!!!  
wrap plot, axis collect

```{r raw_plots}
#| echo: FALSE
#| error: TRUE
#| warning: FALSE

read_and_clean_data <- function(filename) {
  # TODO this fails unless r is restarted first! WHY?
  fname <- here(DATAUSER, "final_raw_data.csv")
  finaldata <- read_csv(fname, # "final_raw_data.csv"
                        col_names = TRUE, 
                        show_col_types = FALSE) 
  
  # change any value in the df that is < zero to NA, invalid data
  finaldata[finaldata < 0] <- NA
  
  # try to auto convert all data types, not all work
  finaldata <- type.convert(finaldata, as.is = TRUE)
  # convert values that were not correctly auto converted
  # TODO add in the type cleanup code, or new function
  finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
  finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
  finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
  
  # NOTE: this observation is turned into a date, not date/time, this is not correct
  # are new variable for "date" needs added
  # finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
  finaldata$SysObs_date <- as.Date(finaldata$SysObs_date)
  
  # only interested in values for this experiment
  finaldata <- finaldata %>% 
    filter(Data_leaftype == "Treatment" |
             Data_leaftype == "Control" |
             Data_leaftype == "Reference") 
  
  # The clock was off at one point, this needs corrected or ignore the values
  finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
  
  return(finaldata)
}

# finaldata <- read_csv(here(DATAUSER,"final_raw_data.csv"), 
#                       col_names = TRUE, 
#                       show_col_types = FALSE) 
# # try to auto convert all data types, not all work
# finaldata <- type.convert(finaldata, as.is = TRUE)
# # convert values that were not correctly auto converted
# finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
# finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
# finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
# # finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
# # This needs converted into a true date type for graphing
# finaldata$SysObs_date <-as.Date(finaldata$SysObs_date)
# # error if <= 0 and arbitrary >= 7
# # TODO this needs to be in the original cleaning code
# # finaldata <- finaldata %>% filter(GasEx_A > 0 & GasEx_A < 7)
# finaldata <- finaldata %>% filter(VARNAME > 0 & 
#                                     (Data_leaftype == "Treatment" | Data_leaftype == "Control" | Data_leaftype == "Reference"))
# # The clock was off at one point, this needs corrected or ignore the values
# # TODO this needs to bin the original cleanind code
# finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
# # finaldata <- finaldata %>% filter(!Filenames_filename == "2023-11-22-1138_logdata")
# 
# # RAW DATA PLOTS
# for (FileName in unique(finaldata$Filenames_filename)) {
#   # print(paste("Generate Plot: ", FileName, " PlantID: ", 
#   # print(FileName)
#   # plot one days readings as a line chart
#   myplot <- plot_plant_line(finaldata, 
#                             plantid = finaldata[finaldata$Filenames_filename==FileName,]$Data_plant_id, 
#                             FileName, "GasEx_A")
#   print(myplot)
#   
#   
# }


read_and_clean_data <- function(filename) {
  # TODO this fails unless r is restarted first! WHY?
  fname <- here(DATAUSER, "final_raw_data.csv")
  finaldata <- read_csv(fname, # "final_raw_data.csv"
                        col_names = TRUE, 
                        show_col_types = FALSE) 
  
  # change any value in the df that is < zero to NA, invalid data
  finaldata[finaldata < 0] <- NA
  
  # try to auto convert all data types, not all work
  finaldata <- type.convert(finaldata, as.is = TRUE)
  # convert values that were not correctly auto converted
  # TODO add in the type cleanup code, or new function
  finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
  finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
  finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
  
  # NOTE: this observation is turned into a date, not date/time, this is not correct
  # are new variable for "date" needs added
  # finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
  finaldata$SysObs_date <- as.Date(finaldata$SysObs_date)
  
  # only interested in values for this experiment
  finaldata <- finaldata %>% 
    filter(Data_leaftype == "Treatment" |
             Data_leaftype == "Control" |
             Data_leaftype == "Reference") 
  
  # The clock was off at one point, this needs corrected or ignore the values
  finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
  
  return(finaldata)
}

finaldata <- read_and_clean_data("final_raw_data.csv")


```

```{r}
# plot_lf <- function(lt, lid, lvar) {

lt <- "Treatment"
lid <- 2
lvar<- "GasEx_VPDleaf"
  print(lt)
  print(lid)
  print(lvar)
  
    lf_summary <- finaldata %>% filter(Data_plant_id == lid & Data_leaftype == lt)

    
    esummary <- ddply(lf_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                  summarise,
                  # data is too variable, use median not mean
                  mean = round(median(get(lvar)), 2),
                  sd = round(sd(get(lvar)), 2))
esummary <- na.omit(esummary)
    # ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
# df_summary <- finaldata %>% filter(Data_plant_id == 2) %>%
  # filter(Data_leaftype == lt)

  # lfsum <- finaldata %>% filter(Data_plant_id == lid) %>%
  #   filter(Data_leaftype == lt) %>%
  #   group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
  # 
  #   arrange(SysObs_date)
  # # plotdf <- na.omit(plotdf)

  # plotdf <- esummary %>%
  #   # group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
  #   summarise(lvar, list(gm = median), sd = sd(lvar))
# 
# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
# esummary <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date),
#                   summarise,
#                   mean = round(median(lvar), 2),
#                   sd = round(sd(lvar, 2)))
# esummary <- na.omit(esummary)
# esummary <- error_summary(finaldata, lid, lvar)

# plotdf <- lfsum %>% 
#              rowwise() %>%
#              do(data.frame(., Mean=mean(unlist(.[lvar])),
#                          stdev=sd(unlist(.[lvar]))))
  
# p <- ggplot(esummary, aes(x = SysObs_date, y=lvar, color = Data_leaftype)) +
#   # geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
#   #               position = position_dodge(0.9),
#   #               width = 0.2) +
#   # geom_line(size = 0.2) +
#   geom_point(size = 2)

    p1 <- ggplot(esummary, 
             aes(x = SysObs_date, y = mean, color = Data_leaftype, 
                 group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), 
                position = position_dodge(0.9), width = .2) +
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  ggtitle(paste("Daily Median ", lvar, " Observations for Elevation ", lid, sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", lvar, sep = '')) 

p1
      
    # return(lfsum)
# }

p <- plot_lf("Treatment", 2, "GasEx_VPDleaf")
# p

```

{{< pagebreak >}}
# Daily Median Functions
```{r daily_mean_data}
#| echo: false
#| warning: false
#| 
# calculate the daily means of a given column in sysobs
mean_plant_data <- function(finaldata, plantid, sysobs) {
  plotdf <- finaldata %>% filter(Data_plant_id == plantid) %>%
    filter(Data_leaftype == "Treatment" | 
             Data_leaftype == "Control" | 
             Data_leaftype == "Reference") %>%
    arrange(SysObs_date)
  
  plotdf <- plotdf %>%
    group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
    summarise_at((sysobs), list(gm = median))
  
  return(plotdf)
}

error_summary <- function(finaldata, plantid, sysobs) {
  df_summary <- finaldata %>% filter(Data_plant_id == plantid) %>%
    filter(Data_leaftype == "Treatment" | 
             Data_leaftype == "Control" | 
             Data_leaftype == "Reference") %>%
    # arrange(SysObs_date) %>%
    group_by(Filenames_filename, Data_leaftype, SysObs_date) %>%
    summarise_at(vars((sysobs)), list(gm = median, sd = sd)) %>% 
    as.data.frame()
  key <- paste(esummary$Filenames_filename, esummary$Data_leaftype, esummary$SysObs_date, sep = "")
  df_summary <- cbind(df_summary, key)
  return(df_summary)
}


plot_means <- function(plot_data, title = "", xlabel = "", ylabel = ""){
  plot1 <- ggplot() +
    geom_point(data = plot_data, 
               aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    # geom_line(data=plot_data, 
    # aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
    ggtitle(title) +
    xlab(xlabel) +
    ylab(ylabel) +
    # scale_y_continuous(limits=c(0.0, 6.0))   +
    #     date_breaks = "10 sec",  expand = expansion(0)) +
    geom_smooth(method=lm, se=FALSE, col='red', size=2) +
    theme(axis.text.x=element_text(angle=60, hjust=1))
  
  return(plot1)
}

variable_boxplot <- function(finaldata, lclevel, lcvariable) {
  
  elevation <- mean_plant_data(finaldata, lclevel, lcvariable)
  
  p <-  ggplot() +
    geom_boxplot(data = elevation, 
                 aes(x = Data_leaftype , y = gm, color = Data_leaftype),
                 outlier.color = "red", outlier.size = 3) +
    # scale_y_continuous(limits=c(1.0, 2.8)) +#, breaks=c(0, 2.5, 3.0, 3.5)) +
    ggtitle(paste("LICOR Daily Median Observations for Elevation ", lclevel, " on ", lcvariable, sep = '')) +
    xlab("Leaf Type") +
    ylab(lcvariable)
  
  return(p)
  
}
```
{{< pagebreak >}}

```{r GasEx_A}
# esummary <- error_summary(finaldata, "2", "GasEx_A")
# 
# esummary <- summarySE(finaldata, measurevar="GasEx_A", 
#                       groupvars=c("Filenames_filename", "Data_group", "Data_leaftype"))

df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Treatment" | 
           Data_leaftype == "Control" | 
           Data_leaftype == "Reference")

esummary <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                  summarise,
                  # data is too variable, use median not mean
                  mean = round(median(GasEx_A), 2),
                  sd = round(sd(GasEx_A), 2))
esummary <- na.omit(esummary)


# ggplot(esummary, aes(x=SysObs_date, y=mean, group(Data_leaftype, SysObs_date))) +
#   geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd))

# #create plot to visualize mean points by team with error bars
# ggplot(esummary, aes(x=SysObs_date, y=mean, color = Data_leaftype,group(Data_leaftype, SysObs_date))) +
#   geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), position = position_dodge(0.9), width = .2) +
#   geom_point(size=2)  
#   # geom_smooth(method=lm, se=FALSE, col='red', size=2)

ggplot(esummary, aes(x = SysObs_date, y=mean, color = Data_leaftype, group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), 
                position = position_dodge(0.9), 
                width = 0.2) +
  geom_line(size = 0.2) +
  geom_point(size = 2)


# esummary <- na.omit(esummary)

# ggplot() +
#     geom_point(data=esummary, 
#               aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
#     # geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.3) #+
#   geom_errorbar(aes(ymin = gm - sd, ymax = gm + sd),
#                 position = position_dodge(0.9), width = .2)
# geom_line(data=plot_data, 
# aes(x = SysObs_date, y = gm, color = Data_leaftype)) +
# scale_y_continuous(limits=c(0.0, 6.0))   +
#     date_breaks = "10 sec",  expand = expansion(0)) +
# geom_smooth(method=lm, se=FALSE, col='red', size=2) +
# theme(axis.text.x=element_text(angle=60, hjust=1))

# ------------------------------

```
# Daily Median Graphs
__dates issues need filled in here__

Elevation 2 graphs are the most complete as elevation 3 did not have accurate data collection until mid-February. Thermocouple movement caused misleading readings.  

The long consistent negative slope is due to a lack of measurements for several weeks before January until the start of January. 

# Daily Median Graphs
__dates issues need filled in here__

Elevation 2 graphs are the most complete as elevation 3 did not have accurate data collection until mid-February. Thermocouple movement caused misleading readings.  

The long consistent negative slope is due to a lack of measurements for several weeks before January until the start of January. 

## LICOR Daily Median Observations on GasEx_A  

```{r graph_means_GasEx_A}
#| echo: false
#| warning: false
#| 
# GRAPH: GasEx_A
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_A")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Median GasEx_A", "SysObs_date", "GasEx_A") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_A")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Median GasEx_A", "SysObs_date", "GasEx_A") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_A")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_A")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```

{{< pagebreak >}}

## LICOR Daily Median Observations on GasEx_gsw  

```{r graph_means_GasEx_gsw}
#| echo: false
#| warning: false
#| 
# GRAPH: GasEx_gsw
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_gsw")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Medians GasEx_gsw", "SysObs_date", "GasEx_gsw") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_gsw")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Medians GasEx_gsw", "SysObs_date", "GasEx_gsw") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_gsw")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_gsw")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```
{{< pagebreak >}}

## LICOR Daily Median Observations on GasEx_VPDleaf

```{r graph_means_GasEx_VPDleaf}
#| echo: false
#| warning: false
#| 
# GRAPH: GasEx_VPDleaf
elevation2 <- mean_plant_data(finaldata, "2", "GasEx_VPDleaf")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Median GasEx_VPDleaf", "SysObs_date", "GasEx_VPDleaf") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_VPDleaf")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Median GasEx_VPDleaf", "SysObs_date", "GasEx_VPDleaf") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "GasEx_VPDleaf")
pb3 <- variable_boxplot(finaldata, "3", "GasEx_VPDleaf")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```
{{< pagebreak >}}

## LICOR Daily Median Observations on Meas_Tleaf

```{r graph_means_Meas_Tleaf}
#| echo: false
#| warning: false
#| 
# GRAPH: Meas_Tleaf
elevation2 <- mean_plant_data(finaldata, "2", "Meas_Tleaf")
plot2 <- plot_means(elevation2, "Elevation 2 Daily Median Meas_Tleaf", "SysObs_date", "Meas_Tleaf") 
elevation3 <- mean_plant_data(finaldata, "3", "GasEx_A")
plot3 <- plot_means(elevation3, "Elevation 3 Daily Median Meas_Tleaf", "SysObs_date", "Meas_Tleaf") 

plot2
plot3
# use patchwork to arrange the two plots on top of each other for comparison
plot2 / plot3

pb2 <- variable_boxplot(finaldata, "2", "Meas_Tleaf")
pb3 <- variable_boxplot(finaldata, "3", "Meas_Tleaf")

pb2
pb3
# use patchwork to arrange the two plots on top of each other for comparison
pb2 / pb3


```

# Testing Graphs With Error Bars  
The period with no recorded data is still shown in the line plot.  
```{r}

# testing error bars in plots


# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Treatment" | 
           Data_leaftype == "Control" | 
           Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummary <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                  summarise,
                  # data is too variable, use median not mean
                  mean = round(median(get(VARNAME)), 2),
                  sd = round(sd(get(VARNAME)), 2))
esummary <- na.omit(esummary)


p1 <- ggplot(esummary, 
             aes(x = SysObs_date, y = mean, color = Data_leaftype, 
                 group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), 
                position = position_dodge(0.9), width = .2) +
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  ggtitle(paste("Daily Median ", VARNAME, " Observations for Elevation ", ELEVATION, sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", VARNAME, sep = '')) 

p1

p2 <- ggplot(esummary, 
             aes(x=SysObs_date, y=mean, color = Data_leaftype,
                 group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), position = position_dodge(0.9), width = 0.2) +
  # geom_line(size= 0.2) +
  geom_point(size = 2) +
  ggtitle(paste("Daily Median ", VARNAME, " Observations for Elevation ", ELEVATION, sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", VARNAME, sep = '')) 
p2

p1/p2

```
```{r variable_trend_graphs}

# variable_trend_by_leaftype <- function(lf_type, lf_elevation) {
#   # leaftype <- "Treatment"
#   lf_elevacion <- 2
#   lf_var <- "GasEx_gsw"
#   print(lf_type)
#   print(lf_elevation)
#   print(lf_var)
#   # ELEVATION <- leaf_elevation
#   # VARNAME <- leaf_varname
#   # ELEVATION constant is already applied above
#   # remove any leaf type that is not part of the experiment
#   df_summary <- finaldata %>% filter(Data_plant_id == lf_elevation) %>%
#     filter(Data_leaftype == lf_type) # |
#     # Data_leaftype == "Control" |
#   # Data_leaftype == "Reference")
# 
#   # ----------- code works but does not split line on missing data
#   # mean values based on a group, and remove any na values
#   lf_summary <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date),
#                       summarise,
#                       # data is too variable, use median not mean
#                       mean = round(median(get(lf_var)), 2),
#                       sd = round(sd(get(lf_var)), 2))
#   lf_summary <- na.omit(lf_summary)
#   
#   lf_plot <- ggplot(lf_summary,
#                     aes(x = SysObs_date,  y = mean, color = Data_leaftype)) + 
#     # group(Data_leaftype, SysObs_date))) +
#     #            aes(y = mean, color = Data_leaftype, 
#     #                group(Data_leaftype, SysObs_date))) +
#     # geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
#     #               position = position_dodge(0.9), width = .2) +
#     # scale_color_manual(name='Leaf',
#     #                    breaks=c('Treatment'),
#     #                    values=c('Treatment'='#F8766D'))+
#     # geom_line(size = 0.2) +
#     geom_point(size = 2) 
#     # geom_smooth() + #add linear trend line
#     # ggtitle(paste("Daily Median ", lf_var, " Elevation ", lf_elevation, "\n",
#     #               "Trendline with 95% Confidence Interval", sep = '')) +
#     # xlab("Week of Observation") +
#     # ylab(paste("median ", lf_var, sep = ''))
#   
#   return(lf_plot)  
# }


# c2 <- variable_trend_by_leaftype("Treatment", 2)
# c2 <- variable_trend_by_leaftype("Treatment", 2, "GasEx_A")
# 
# c2
# 
# c3 <- variable_trend_by_leaftype("Treatment", 2, "GasEx_VPDleaf")
# c3

# c2/c3
```


```{r treatment_95}

ELEVATION <- 2
VARNAME <- "GasEx_A"
# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Treatment") # | 
  # Data_leaftype == "Control" | 
# Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummaryT <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                   summarise,
                   # data is too variable, use median not mean
                   mean = round(median(get(VARNAME)), 2),
                   sd = round(sd(get(VARNAME)), 2))
esummaryT <- na.omit(esummaryT)


t1 <- ggplot(esummaryT, 
             aes(x = SysObs_date,  y = mean, color = Data_leaftype)) + 
  # group(Data_leaftype, SysObs_date))) +
  #            aes(y = mean, color = Data_leaftype, 
  #                group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
                position = position_dodge(0.9), width = .2) +
  scale_color_manual(name='Leaf',
                     breaks=c('Treatment'),
                     values=c('Treatment'='#F8766D'))+
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  geom_smooth() + #add linear trend line
  ggtitle(paste("Daily Median ", VARNAME, " Elevation ", ELEVATION, "\n",
                "Trendline with 95% Confidence Interval", sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", VARNAME, sep = ''))

t1


ELEVATION <- 2
VARNAME <- "GasEx_gsw"
# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Treatment") # | 
  # Data_leaftype == "Control" | 
# Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummaryT <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                   summarise,
                   # data is too variable, use median not mean
                   mean = round(median(get(VARNAME)), 2),
                   sd = round(sd(get(VARNAME)), 2))
esummaryT <- na.omit(esummaryT)


t2 <- ggplot(esummaryT, 
             aes(x = SysObs_date,  y = mean, color = Data_leaftype)) + 
  # group(Data_leaftype, SysObs_date))) +
  #            aes(y = mean, color = Data_leaftype, 
  #                group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
                position = position_dodge(0.9), width = .2) +
  scale_color_manual(name='Leaf',
                     breaks=c('Treatment'),
                     values=c('Treatment'='#F8766D'))+
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  geom_smooth() + #add linear trend line
  ggtitle(paste("Daily Median ", VARNAME, " Elevation ", ELEVATION, "\n",
                "Trendline with 95% Confidence Interval", sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", VARNAME, sep = ''))

t2

t1/pt
```


```{r control_95}

ELEVATION <- 2
VARNAME <- "GasEx_A"
# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Control") # | 
  # Data_leaftype == "Control" | 
# Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummaryT <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                   summarise,
                   # data is too variable, use median not mean
                   mean = round(median(get(VARNAME)), 2),
                   sd = round(sd(get(VARNAME)), 2))
esummaryT <- na.omit(esummaryT)


c1 <- ggplot(esummaryT, 
             aes(x = SysObs_date,  y = mean, color = Data_leaftype)) + 
  # group(Data_leaftype, SysObs_date))) +
  #            aes(y = mean, color = Data_leaftype, 
  #                group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
                position = position_dodge(0.9), width = .2) +
  scale_color_manual(name='Leaf',
                     breaks=c('Control'),
                     values=c('Control'='#619CFF')) +
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  theme(axis.text.x=element_text(angle=60, hjust=1)) +
  scale_x_date(date_breaks = "1 week", date_labels =  "%b %d") +
  
  geom_smooth(col='black') + #add linear trend line
  ggtitle(paste("Daily Median ", VARNAME, " Elevation ", ELEVATION, "\n",
                "Trendline with 95% Confidence Interval", sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", VARNAME, sep = ''))

c1


ELEVATION <- 2
VARNAME <- "GasEx_gsw"
# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Control") # | 
  # Data_leaftype == "Control" | 
# Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummaryT <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                   summarise,
                   # data is too variable, use median not mean
                   mean = round(median(get(VARNAME)), 2),
                   sd = round(sd(get(VARNAME)), 2))
esummaryT <- na.omit(esummaryT)


c2 <- ggplot(esummaryT, 
             aes(x = SysObs_date,  y = mean, color = Data_leaftype)) + 
  # group(Data_leaftype, SysObs_date))) +
  #            aes(y = mean, color = Data_leaftype, 
  #                group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
                position = position_dodge(0.9), width = .2) +
  scale_color_manual(name='Leaf',
                     breaks=c('Control'),
                     values=c('Control'='#619CFF'))+
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  theme(axis.text.x=element_text(angle=60, hjust=1)) +
  scale_x_date(date_breaks = "1 week", date_labels =  "%b %d") +
  geom_smooth(col='black') + #add linear trend line
  ggtitle(paste("Daily Median ", VARNAME, " Elevation ", ELEVATION, "\n",
                "Trendline with 95% Confidence Interval", sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", VARNAME, sep = ''))

c2

c1/c2
```


```{r reference_95}

ELEVATION <- 2
VARNAME <- "GasEx_VPDleaf"
# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Reference") # | 
  # Data_leaftype == "Control" | 
# Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummaryT <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                   summarise,
                   # data is too variable, use median not mean
                   mean = round(median(get(VARNAME)), 2),
                   sd = round(sd(get(VARNAME)), 2))
esummaryT <- na.omit(esummaryT)


r1 <- ggplot(esummaryT, 
             aes(x = SysObs_date,  y = mean, color = Data_leaftype)) + 
  # group(Data_leaftype, SysObs_date))) +
  #            aes(y = mean, color = Data_leaftype, 
  #                group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
                position = position_dodge(0.9), width = .2) +
  scale_color_manual(name='Leaf',
                     breaks=c('Reference'),
                     values=c('Reference'='#00BA38'))+
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  geom_smooth(col='black', size=2) + #add linear trend line
  ggtitle(paste("Daily Median ", VARNAME, " Elevation ", ELEVATION, "\n",
                "Trendline with 95% Confidence Interval", sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", VARNAME, sep = ''))

r1


ELEVATION <- 2
VARNAME <- "GasEx_RHcham"
# ELEVATION constant is already applied above
# remove any leaf type that is not part of the experiment
df_summary <- finaldata %>% filter(Data_plant_id == ELEVATION) %>%
  filter(Data_leaftype == "Reference") # | 
  # Data_leaftype == "Control" | 
# Data_leaftype == "Reference")


# ----------- code works but does not split line on missing data
# mean values based on a group, and remove any na values
esummaryT <- ddply(df_summary, .(Filenames_filename, Data_leaftype, SysObs_date), 
                   summarise,
                   # data is too variable, use median not mean
                   mean = round(median(get(VARNAME)), 2),
                   sd = round(sd(get(VARNAME)), 2))
esummaryT <- na.omit(esummaryT)


r2 <- ggplot(esummaryT, 
             aes(x = SysObs_date,  y = mean, color = Data_leaftype)) + 
  # group(Data_leaftype, SysObs_date))) +
  #            aes(y = mean, color = Data_leaftype, 
  #                group(Data_leaftype, SysObs_date))) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
                position = position_dodge(0.9), width = .2) +
  scale_color_manual(name='Leaf',
                     breaks=c('Reference'),
                     values=c('Reference'='#00BA38'))+
  geom_line(size = 0.2) +
  geom_point(size = 2) +
  geom_smooth(col='black', size=2) + #add linear trend line
  ggtitle(paste("Daily Median ", VARNAME, " Elevation ", ELEVATION, "\n",
                "Trendline with 95% Confidence Interval", sep = '')) +
  xlab("Week of Observation") +
  ylab(paste("median ", VARNAME, sep = ''))

r2

r1/r2
```



