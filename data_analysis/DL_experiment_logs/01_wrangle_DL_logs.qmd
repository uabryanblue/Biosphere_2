---
title: "Wrangle Experiemtnal Datalogger Logs"
author: "Bryan Blue"
format: html

execute:
  echo: false
format: 
  html:
    code-fold: true
    fig-width: 8
    fig-height: 6
  pdf:
    fig-width: 7
    fig-height: 5
---

## Quarto


```{r init}
#| echo: false
library(here)
library(readr)
library(purrr)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)

# constants to data paths
DATARAW <- "data_raw"
DATACLEAN <- "data_clean"
DATAUSER <- "data_user"
```


```{r dl_log_loading}
# TESTING/DEVELOPMENT ONLY

# common functions for DL_experiment project

# look at all files in all sub directories specified by DATARAW
# any filename that starts with "CLIMATE" for the Temperature Humidity Pressure sensor is read into a single df
# this is the aspirated sensor hung next to the experiment
raw_climate_dl_data <- as.vector(grep("DL1", list.files(here(DATARAW), recursive = TRUE, pattern = "^CLIMATE"), value = TRUE))  %>%
  map_df(~read_csv(here(DATARAW, .),
                   col_names = c("DL_datetime", "Obs_number", "sensor_datetime", "sensor_MAC", "temp_C", "RH", "pressure", "readings_averaged"),))

# any filename that starts with "TRC" for the Temperature Relay Control unit is read into a single df
# this is the unit that regulates and controlls heating to the warmed leaf, it also records temperatures
# for the Treatment, Control, Reference leaves and the heating pads, one is on and one is always off
# each thermocouple reading also has it's cold junction recorded
# each cold junction temperature should be the same value or errors are introduced among measurements
raw_TRC_dl_data <- as.vector(grep("DL1", list.files(here(DATARAW), recursive = TRUE, pattern = "^TRC"), value = TRUE))  %>%
  map_df(~read_csv(here(DATARAW, .),
                   col_names = c("DL_datetime", "Obs_number", "sensor_datetime", "sensor_MAC", "T1", "T2", "T3", "T4", "T5", "CJ1", "CJ2", "CJ3", "CJ4", "CJ5"),))

# 
# read_and_clean_data <- function(filename) {
#   # TODO this fails unless r is restarted first! WHY?
#   # fname <- here(DATAUSER, "final_raw_data.csv")
#   finaldata <- read_csv(filename, # "final_raw_data.csv"
#                         col_names = c("sensor_datetime", "Obs_number", "DL_datetime", "sensor_MAC", "temp_C", "RH", "pressure", "readings_averaged"),
#                         show_col_types = FALSE)
#   return(finaldata)
# }
# 
  # change any value in the df that is < zero to NA, invalid data
  # finaldata[finaldata < 0] <- NA
  
  # try to auto convert all data types, not all work
  
  # finaldata <- type.convert(finaldata, as.is = TRUE)
  
  # convert values that were not correctly auto converted
  # TODO add in the type cleanup code, or new function
  # finaldata$Data_leaftype <- as.factor(finaldata$Data_leaftype)
  # finaldata$Filenames_filename <- as.factor(finaldata$Filenames_filename)
  # finaldata$Data_plant_id <- as.factor(finaldata$Data_plant_id)
  
  # NOTE: this observation is turned into a date, not date/time, this is not correct
  # are new variable for "date" needs added
  # finaldata$SysObs_date <-  as.POSIXct(finaldata$SysObs_date, format = "%Y%m%d %H:%M:%S")
  # finaldata$SysObs_date <- as.Date(finaldata$SysObs_date)
  
  # only interested in values for this experiment
  # finaldata <- finaldata %>% 
  #   filter(Data_leaftype == "Treatment" |
  #            Data_leaftype == "Control" |
  #            Data_leaftype == "Reference") 
  # 
  # The clock was off at one point, this needs corrected or ignore the values
  # finaldata <- finaldata %>% filter(SysObs_time > 1668543540) %>% arrange(SysObs_date)
  # 
#   return(finaldata)
# }




```

